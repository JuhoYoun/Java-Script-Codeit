JS 에는 다양한 숫자 표현 방법이 있다

ex) 
let num = 2e9 (지수 표기법)
console.log(num) -> 2000000000

ex)
let num = -2e-3
console.log(num)  ->  -0.002

그리고 JS는 16진수 8진수 그리고 2진수를 표현하는 방법도 있다

//16진법 (Hexadecimal)
let hex1 = 0xff; // 255
let hex2 = 0xFF; // 255

//8진법 (Octal)
let octal = 0o377; //255

//2진법 (binary numeral system)
let binary = 0b11111111; // 255

console.log(hex1);
console.log(hex2);
console.log(octal);
console.log(binary);

--------------------------------------------------------------------------------------------------------------------------------

숫자도 객체이다 숫자형이 가지고 있는 메소드는 다루기 어려운데 이번에 두개만 다뤄보자

toFixed 메소드
소수를 다룰 때 사용되며 소수점 아래에 자리수를 고정할 때 사용한다 (반올림 한다) 범위는 0 부터 100 까지이고 만약에 패러미터로 들어가는 숫자가 숫자값의 자리수를 초과하는 경우에는 0으로 대체된다

let num =0.3567

console.log(num.toFixed(3)) -> 0.357
console.log(num.toFixed(7)) -> 0.3567000

주의해야할 점은 toFixed 메소드가 반환하는 값이 string 이라는 것이다 그래서 toFixed 가 반환하는 값을 숫자로 활용하려면 number 함수를 이용해서 숫자형으로 바꿔줘야한다 단 이때 자리수 채우기로 들어간 0 
은 제거된다

한가지 팁이 있는데 JS에서는 어떤 값 앞에 +를 붙이면 number 함수와 똑같은 결과를 얻을 수 있다
ex) console.log(+num.toFixed(7)) -> 0.3567

toString 메소드
패리미터로 전달하는 숫자의 진법으로 숫자를 변형시켜준다 범위는 2부터 36 까지이다 반환하는 값은 역시 문자열이다 

let num =125

console.log(num.toString(2)) -> 1111101
console.log(num.toString(8)) -> 175
console.log(num.toString(16)) -> 7d

마지막으로 한가지 집고 넘어갈 것이 있는데 지금까지는 변수에 숫자형을 담은 후 변수에 점 표기봅을 써 메소드를 호출했는데 변수에 담지 않고 숫자형에 바로 쓸 수도 있다 단 
255.toString(16) 이런식으로는 못쓴다 이렇게 쓰면 이 . 은 소수점을 시작하는 . 으로 인식되기 때문이다 그래서 정수형의 숫자값에는 메소드를 사용할 때 .. 이렇게 점 두개를 써줘야한다
-> 255..toString(16)   
또 다른 방법으로는 양옆에 괄호를 씌어줘도 된다

let num =125

console.log(125..toFixed(2)) -> 125.00
console.log(125.1.toFixed(2)) -> 125.10
console.log((125).toFixed(2)) -> 125.00

----------------------------------------------------------------------------------------------------------------------------------------------------

Date객체처럼 자바스크립트의 내장 객체 중 다양한 연산들을 유용하게 사용하기 위해 Math라는 객체가 있습니다.

이번 노트에서는 Math객체의 다양한 메소드에 대해 살펴봅시다.
절댓값 (Absolute Number)

학창 시절 수학 시간에서 배운 '절댓값(absolute value)' 기억하시나요?

간단하게 설명하자면, 어떤 값의 '양수(positive number)' 버전이라고 할 수 있습니다. 음수 -5의 절댓값은 양수 5고, 그냥 양수 5의 절댓값은 그대로 양수 5인 거죠.

Math.abs(x)를 하면 x의 절댓값이 리턴됩니다.

console.log(Math.abs(-10));
console.log(Math.abs(10));

10
10

최댓값 (Maximum)

Math.max 함수에 파라미터로 여러 수를 넘겨주면, 그중 가장 큰 값이 리턴됩니다.

console.log(Math.max(2, -1, 4, 5, 0));

5

최솟값 (Minimum)

Math.min 함수에 파라미터로 여러 수를 넘겨주면, 그중 가장 작은 값이 리턴됩니다.

console.log(Math.min(2, -1, 4, 5, 0));

-1

거듭제곱 (Exponentiation)

'제곱'의 개념 기억하시나요? '2의 3승'(혹은 '2의 세제곱')을 하면, 2를 세 번 곱한다는 뜻입니다. '2 곱하기 2 곱하기 2'를 하면 8이죠? 마찬가지로 '5의 2승'을 하면, '5 곱하기 5'를 해서 25입니다.

자바스크립트에서 Math.pow(x, y)를 하면 x의 y승의 결괏값이 리턴됩니다.

console.log(Math.pow(2, 3));
console.log(Math.pow(5, 2));

8
25

제곱근 (Square Root)

'제곱근(square root)'은 '제곱'의 반대라고 생각할 수 있습니다. 5의 제곱이 25이기 때문에, 25의 제곱근은 5입니다. 7의 제곱이 49이기 때문에, 49의 제곱근은 7입니다.

Math.sqrt(x)를 하면 x의 제곱근이 리턴됩니다.

console.log(Math.sqrt(25));
console.log(Math.sqrt(49));

5
7

반올림 (Round)

Math.round(x)를 하면 x의 반올림된 값이 리턴됩니다. 소수점 부분이 0.5 이상이면 가장 가까운 정숫값으로 올라가고, 소수점 부분이 0.5 미만이면 가장 가까운 정숫값으로 내려갑니다.

console.log(Math.round(2.3));
console.log(Math.round(2.4));
console.log(Math.round(2.49));
console.log(Math.round(2.5));
console.log(Math.round(2.6));

2
2
2
3
3

버림과 올림 (Floor and Ceil)

Math.floor(x)을 하면 x의 버림 값이, Math.ceil(x)을 하면 x의 올림 값이 리턴됩니다. 이 경우, 소수 부분이 얼마 인지와는 상관이 없습니다.

console.log(Math.floor(2.4));
console.log(Math.floor(2.49));
console.log(Math.floor(2.8));
console.log('-');
console.log(Math.ceil(2.4));
console.log(Math.ceil(2.49));
console.log(Math.ceil(2.8));

2
2
2
-
3
3
3

난수 (Random)

Math.random을 하면 0 이상 1 미만의 값이 랜덤으로 리턴됩니다.

console.log(Math.random());
console.log(Math.random());
console.log(Math.random());
console.log(Math.random());

0.21458369059793236
0.6622040803059857
0.785172717569619
0.9056556038884926

그리고...

이뿐만 아니라 '삼각 함수 계산'이나 '로그'같은 더 깊은 수학 계산도 가능합니다. 더 깊게 알아보고 싶다면 이 링크 를 참고해보세요!
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math
----------------------------------------------------------------------------------------------------------------------------------------

let sum = 0.1 + 0.2;
console.log(sum);  ->  0.3이 아니라 0.30000000000000004 이 출력된다 

그런데 이건 JS만이 아니라 파이썬 루비 자바등 다른 언어에서도 똑같이 발생하는 오류이다 이런 단순한 계산 오류는 왜 생기는걸까?
가장 큰 원인은 사람과 컴퓨터의 숫자를 다루는 방식이 서로 다르기 때문이다 컴퓨터의 모든 코드는 0과 1로 이루어져있다 우리가 적은 코드는 이진수로 변환된 다음에
컴퓨터가 해석을 하는데 우리가 3분의 1이라는 분수를 소수로 표현하면 0.33333333 이렇게 무한 소수로 표현된다 비슷한 원리로 우리가 일반적으로 사용하는 10진수의 숫자 표현을 이진수로 바꿔서 계산을 하다보면
무한소수가 되는 경우가 발생한다 그런데 이 무한소수는 말그대로 무한히 이어지기 때문에 명학하게 표시할 수 있는 방법이 없다 그래서 JS가 숫자를 표현할 수 있는 범위 내에서 특정한 자리에서 숫자를
반올림 하게 되는데 여기서 발생하는 아주 미세한 값의 차이가 바로 오차로 발생한다 

그럼 이 오차를 해결하는 방법을 얘기해보면 toFixed 메소드를 활용해서 필요한 자릿수에 맞춰서 반올림 되게 만들어주는거다 
->
let sum = 0.1 + 0.2;
console.log(+sum.toFixed(1));

아니면 Math 객체의 round 메소드를 활용해서 우리가 필요한 소수점 자리수 만큼의 10의 거듭 제곱을 곱한 뒤 round 메소드를 써준 뒤 다시 곱한 값으로 나줘준다 

let sum = 0.1 + 0.2;
console.log(Math.round(sum * 10) / 10)

다른 방법들도 있는데 여기까지만 다루자
------------------------------------------------------------------------------------------------------------------------------------

문자열 심화

문자열도 객체이므로 객체처럼 다룰 수 있다 문자열은 배열과 닮은 부분이 많다

length 프로퍼티 
배열처럼 문자열의 길이를 알려준다
ex)
let str = "Hello"
console.log(str.length) -> 5

문자열도 인덱스를 이용해서 글자 하나하나에 접근할 수 있다
ex)
let str = "Hello"
console.log(str[1]) -> e

또 문자열은 특별히 charAt 이라는 메소드를 활용해서 접근할 수 있다
ex)
let str = "Hello"
console.log(str.charAt(1)) -> e

또 배열에서 활용할 수 있는 indexOf와 lastIndexOf 를 활용해서 요소를 찾을 수도 있다 
ex)
let str = "Hello"
console.log(str.indexOf('H'))  -> 0
console.log(str.lastIndexOf('l'))  -> 3

toUpperCase 와 toLowerCase 
모두 대문자로 바꿔주거나 소문자로 바꾼 문자열을 리턴한다
ex)
let str = "Hello"
console.log(str.toUpperCase())  -> HELLO
console.log(str.toLocaleLowerCase())  -> hello

trim
문자열의 양쪽 공백을 모두 없앤 문자열을 리턴한다
ex)
let str = "  Hello  "
console.log(str)  ->Hello
console.log(str.trim())  ->  Hello

slice
부분 문자열을  메소드이다 두개의 파라미터를 가지고 있으며 시작과 끝 인덱스이다 한가지 주의할 점은 끝 인덱스 바로 직전까지의 범위를 가져온다는 것이다
ex)
let str = "Hello"
console.log(str.slice(1,3))  ->  el
console.log(str.slice(2))  ->  llo
console.log(str.slice())  -> Hello

---------------------------------------------------------------------------------------------------------------------------------------------------

문자열도 생각해보면 '문자' + '열'이기 때문에 배열과 비슷한 부분들이 많습니다.
비슷한 점

실제로 지난 시간에 배열과 문자열 모두 length프로퍼티를 가지고 있고, 대괄호 표기법으로 각 요소에 접근할 수 있다거나..
꽤 많은 메소드들이 배열과 문자열 모두 동일하게 사용되는 것도 확인할 수 있었는데요. 심지어 지난 시간에 다루진 못했지만 배열을 다룰 때 유용한 for..of문을 문자열에 활용할 수도 있습니다.

let myString = 'Codeit';

for (let str of myString) {
  console.log(str);
}

C
o
d
e
i
t

다른 점

하지만 비슷하다고 해서 완전히 같다고는 할 수 없습니다.

let myString = 'Codeit';
let myArray = ['C', 'o', 'd', 'e', 'i', 't'];

console.log(typeof myString);
console.log(typeof myArray);

일단 typeof 연산자를 사용해서 두 값의 자료형을 비교해보면,

string
object

string과 object, 확실히 서로 다른 자료형인 걸 확인할 수 있고,

let myString = 'Codeit';
let myArray = ['C', 'o', 'd', 'e', 'i', 't'];

console.log(myString === myArray);
console.log(myString == myArray);

두 값을 서로 비교해 보아도

false
false

일치 비교뿐만 아니라, 느슨하게 비교하는 동등비교에서도 false가 출력되는걸 확인할 수 있습니다.
mutable vs. immutable

가장 중요한 차이는 배열은 'mutable(바뀔 수 있는)' 자료형인 반면 문자열은 'immutable(바뀔 수 없는)' 자료형이라는 것입니다.

배열은 요소에 접근해서 할당연산자를 통해 요소를 수정할 수 있었죠?

문자열은 한 번 할당된 값을 수정할 수 없습니다. 다르게 표현해서, 변수에 할당된 문자열을 바꾸고 싶다면, 일부를 바꾸는 게 아니라 새로운 문자열을 지정해주어야 한다는 것이죠.

// 배열은 mutable
let myArray = ['C', 'o', 'd', 'e', 'i', 't'];
myArray[0] = 'B';
console.log(myArray);

// 문자열은 immutable
let myString = 'Codeit';
myString[0] = 'B';
console.log(myString);

(6) ["B", "o", "d", "e", "i", "t"]
Codeit

다시 한번 되돌아보면, 문자열이 가진 메소드들은 모두 retrun 값들을 활용하고, 본래의 문자열 값을 수정하지 않습니다. 
같은 의미에서 문자열에 splice 같은 메소드들은 사용할 수 없겠죠?

문자열과 배열은 서로 비슷하지만 엄연히 다른 차이가 있다는 점 꼭 기억해 주세요!

---------------------------------------------------------------------------------------------------------------------------------------------

기본형과 참조형

자료형 (Data Type)
지금까지 배운 자료형들을 모두 나열해보면 숫자형 문자열 불린형 널 언디파인드 그리고 객체를 살펴봤는데 그 중에서 객체를 제외한 나머지를 기본형, 기본타입 영어로는 Primitive Type 이라고 한다
우리가 어떤 값을 다룰 때 특별한 경우를 제외하면 모두 변수에 할당해서 사용하는데 JS에서 변수에 기본형을 할당하면 해당 이름을 가진 상자에 그 값을 넣어준다고 생각할 수 있다 

let x = 3; // x라는 상자에 3이라는 값을 할당
let y = x; // y라는 변수에 변수 x를 할당하면 x가 가지고 있는 값을 복사해서 담게된다 

console.log(x); //3
console.log(y); //5

y = 5 // y에 5라는 새로운 값을 할당

console.log(x); //3 
console.log(y); //5 

그럼 객체는 어떻게 다를까?

let x = {name: 'codeit'};
let y = x 

console.log(x);  -> { name: 'codeit' }
console.log(y);  -> { name: 'codeit' }

y.birth = 2017;

console.log(x);  -> { name: 'codeit', birth: 2017 }
console.log(y);  -> { name: 'codeit', birth: 2017 }

JS에서 변수에 객체 값을 할당란 경우에는 조금 특별하게 동작한다 객체 값이 어딘가에서 만들어지고 변수에는 그 객체값으로 가는 주소가 저장된다 
좀 더 쉽게 생각하면 변수 상자와 객체값 사이의 길이 열리는 것이다 처음에 x 에 객체를 할당해 줄 때 어딘가에서 객체가 만들어지고 이 객체와 이어지는 길이
x에 할당되는 것이다 y = x 할 때는 y 에 이 길이 복사되는 것이다 그래서 x와 y는 같은 객체를 바라보게 된다 이렇게 주소값을 참조해서 그 값에 접근하기 때문에 
객체와 같은 자료형을 참조형 영어로는 Reference Type 이라고 한다 
배열도 마찬가지로 변수에 할당될 때 주소값이 담긴다 

정리해보면 변수에 기본형을 할당하면 값이 그대로 할당되고 참조형을 변수에 할당하면 해당 객체를 가리키는 주소값이 할당된다는것이다 
-----------------------------------------------------------------------------------------------------------------------------------------

참조형 복사하기 

배열에서 위 처럼 x와 y가(위에서는 둘 두 객체였지만) 둘 다 객체를 바라볼 때 x를 통해 그 객체를 변형하면 y도 변형된다 이를 막기 위해 y에 x가 가르키는 객체의 주소 말고 x가 가리키는 객체를 완전히 복사한 다른 객체의 주소를 할당할 수 있다
이 때 배열의 경우에는 문자열 메소드에서 살펴봤던 slice 메소드를 활용하면 간단하게 해결할 수 있는데 slice 메소드에 아무 패러미터도 넣지 않으면 원래 값이 그대로 리턴된다 마치 배열을 그대로 복사하는 효과를 
가진다 

let num1 = [1,2,3]
let num2 = num1.slice()

num2.push(4)

console.log(num1)  ->  [ 1, 2, 3 ]
console.log(num2)  ->  [ 1, 2, 3, 4 ]

그러면 객체는 어떨까?
객체이는 slice 메소드가 없다 객체는 JS에서 미리 만들어논 Object 이란 객체의 assign 메소드를 활용하면 복사를 할 수 있다 

let course1 = {
  title: "파이썬",
  language: "Python"
}

let course2 = Object.assign({}, course1);

course2.title = "알고리즘"

console.log(course1)
console.log(course2)

그런데 좀 더 직관적이게 이해하기 위해서 메소드를 활용하지 않고 for in 문으로 객체를 한번 복사해보자 

let course1 = {
  title: "파이썬",
  language: "Python"
}

let course2 = {}

for ( let key in course1 ){
  course2[key] = course1[key]
}

course2.title = "알고리즘"

console.log(course1)
console.log(course2)

짜잔 그런데 위의 for 문을 이용한 방법은 너무 course1과 course2 에 한정적이다 그래서 course3 이나 course4 가 생기면 또 for문을 작성해야한다

function clone(object) {
  let temp = {}
  
  for (let key in object) {
    temp[key] = object[key]
  }
  return temp
}

let course1 = {
  title: "파이썬",
  language: "Python"
}

let course2 = clone(course1)

course2.title = "알고리즘"

console.log(course1)
console.log(course2)

위처럼 함수를 만들면 더 효율적이게 복사를 할 수 있다 그런데 여기도 한가지 주의할 점이 있는데 다음의 코드를 보자

function clone(object) {
  let temp = {}
  
  for (let key in object) {
    temp[key] = object[key]
  }
  return temp
}

let course1 = {
  title: "파이썬",
  language: "Python",
  prerequisite: []
}

let course2 = clone(course1)

course2.prerequisite.push("알고리즘")

console.log(course1)  ->  { title: '파이썬', language: 'Python', prerequisite: [ '알고리즘' ] }
console.log(course2)  ->  { title: '파이썬', language: 'Python', prerequisite: [ '알고리즘' ] }

분명 클론을 만들었는데도 두 객체의 prerequisite 프로퍼티가 모두 바뀌었다 이건 prerequisite 프로퍼티 밸류가 배열이기 때문에 복사될 때 course 1 의 prerequisite 이 가리키는 객체의 주소가 course2의
prerequisite 에 복사되기 때문이다

이 문제는 아래처럼 코드를 수정하면 해결되긴 하는데 아직 안배운 내용들이 많이 들어갔다
function clone(object) {
  if (object === null || typeof object !== 'object'){
    return object
  }
  
  let temp = {}
  if (Array.isArray(object)) {
    temp = []
  } else {
    temp = {}
  }
  
  for (let key of Object.keys(Object)) {
    temp[key] = object[object[key]]
  }
  return temp
}
---------------------------------------------------------------------------------------------------------------------------

변수와 상수 사이

몇몇 스타일 가이드에는 변수를 const 키워드로 선언하라고 권장하는데 분명 상수를 만들 때 사용한다고 배웠는데 왜 변수 선언에 let 이 아닌 const 를 사용하라고 할까?
일단 const 와 let 의 가장 큰 차이를 보면 바로 재할당이 불가능하다는건데 let 으로 선언한 변수는 이렇게 재할당이 가능하고 계속해서 값을 바꿀 수 있지만 const로 선언한
다음에 재할당을 하려하면 오류가 발생한다 그래서 일반적으로 PI같은 고정된 값을 사용할 때 const 키워드를 사용한다고 배웠다 그런데 아이러니 하게도 영어로는 constant 의 
약자인 const 로 변수인 variable 을 만든다는 것이 이상하게 느껴질수 있다 여기서 조금 다양한 관점으로 이 언어의 의미를 해석할 필요가 있는데 간단하게 예를 들어 우리가 검색 기능을 
개발한다고 생각해보자 당연히 검색창에 키워드를 입력받는다 그런데 검색창의 입장에서 입력되는 키워드는 항상 일정하지 않고 누가 어떤 키워드로 입력할지 아무도 모른다 
셀 수 없이 많은 경우의 수로 변하기 때문에 이 키워드 부분은 변수인 것이다 하지만 결국 검색 버튼을 눌러서 정보를 검색하는 동작을 수행할 때는 중간에 이 키워드 값이 변할 일이 없다
변해서도 안된다 왜냐면 이 키워드를 기준으로 필요한 정보를 찾아야하기때문이다 결국 검색 기능이 동작하는 시점에서는 이 키워드가 상수라고 볼 수 있다 사실 대부분의 서비스나 
프러그램들은 이렇게 날씨, 날짜 혹은 사용자의 입력값에 따라 상대적으로 다양한 변수들이 존재하면서도 코드가 동작하는 순간에는 결국 상수로 쓰이는 경우가 더 많다 
이정도면 조금은 const로 변수를 만든다는 것이 이해가 되는가? 참고로 우리가 작성하는 코드 속에 변하게 되는 값이 많을수록 코드의 일관성을 유지하기가 어렵다 이렇게 변수에 값이 
재할당되면 그 시점을 기준으로 재할당 이전의 변수와 이후의 변수의 값이 서로 다르기 때문에 코드의 전체적인 흐름에도 영향을 미치게 된다 코드가 짧을 때는 큰 문제가 되지 않지만 
많은 양의 코드를 작성한 경우에는 나중에 각 변수들이 어떤 값을 가지고 있을지 혼란스러워 질 수 있다 뿐만 아니라 실재로 값이 변하지 않더라고 언젠가 변할 수 있다는 가능성은 
코드를 읽는 사람의 입장에서는 이 값이 언제 바뀔지 모르는 불안요소로 작용할 수 있기 때문에 어느순간부터 코드를좀 더 일관되게 그리고 안전하게 작성하고자 하는 취지에서 const 키워드로 
변수를 사용하기 시작한거다 자 그럼 또 진짜 상수와 변수는 어떻게 구분할까? 라는 의문이 생길 수 있는데 상수 레슨을 잘 들었다면 답을 알고 있을거다
변수와 상수는 키워드 뿐만 아니라 이름을 짓는 방식도 다르다 변수는 기본적으로 영어 소문자로 작성하고 여러 단어들이 조합될 때는 두번째 오는 단어부터는 각 단어의 첫문자를 
대문자로 표기하는 방식을 쓰고 상수 이름은 기본적으로 영어 대문자로 작성하고 여러 단어가 조합될 때는 밑줄로 단어를 구분한다 
마지막으로 한가지 주의할 점이 있는데 객체는 변수의 주소값이 저장된다고 배웠죠? 메소드로 변경하는 것은 그렇다 치더라도 할당 연산자로 값을 변경하면 값을 재할당하는것처럼 오해할 
수가 있다 하지만 객체 프로퍼티나 배열의 요소들이 변경되는 경우는 변수가 가진 주소값을 변경하는게 아니기 때문에 const 키워드로 변수를 선언했다고 하더라고 변수의 값이 충분히 변할 수도 있다 
------------------------------------------------------------------------------------------------------------------------------------------------------------------

16. 변수, 그땐 그랬지
프로그래밍과 데이터 in JavaScript

28/46 레슨 완료
01. 객체와 프로퍼티
02. 객체와 프로퍼티 익히기
03. 객체에서 데이터 접근하기
04. 영어 단어장 I
05. 객체 다루기
06. 영어 단어장 II
07. 객체와 메소드
08. 영어 단어장 III
09. for...in 반복문
10. for...in 주의사항
11. 순이들의 시험 결과
12. Date객체
13. Date객체 Tip
14. 우수사원 재상이
01. 배열
02. 배열 인덱싱 연습하기
03. 배열 다루기
04. 온도 바꾸기
05. 배열 메소드 I
06. splice 연습하기
07. 배열 메소드 II
08. 배열 메소드 익히기
09. 배열 메소드 Tip
10. for...of 반복문
11. 투표 집계하기
12. 다차원 배열
13. 팀 나누기
01. 다양한 숫자 표기법
02. 숫자형 메소드
03. 숫자형 더 익히기
04. Math객체
05. 바보 자바스크립트?
06. 이자 계산기
07. 문자열 심화
08. 문자열과 배열 사이
09. 그래, 우리 함께
10. 기본형과 참조형
11. 기본형과 참조형 익히기
12. 참조형 복사하기
13. 레시피 만들기
14. const, 변수와 상수 사이
15. const와 참조형 익히기
current-lesson
16. 변수, 그땐 그랬지
01. 팩토리얼
02. 거스름돈 구하기
03. 팰린드롬

자바스크립트에는 variable의 약자를 따서 var라는 키워드로 변수를 선언할 때가 있었습니다.
자바스크립트에 변수를 선언하는 방식은 처음부터 let과 const가 아니였던 것이죠!

그래서 오래된 프로젝트들이나 혹은 자바스크립트의 정보들을 정리해둔 조금 오랜 시간이 지난 블로그들을 살펴보면 심심찮게 var라는 키워드를 만나볼 수가 있는데요.

이제는 거의 사용되지 않는 var 변수, 그래도 언제 어떻게 만나게 될지 모르니 조금만 살펴봅시다. 어떤 문제가 있길래 사용되지 않는지, 가볍게라도 알고 있는 게 좋겠죠?
변수 선언

일단 아래 코드 처럼 var 변수는 let 이나 const 처럼 똑같이 키워드 다음에 변수이름을 써서 선언할 수 있고,

var myVariable;

myVariable = 'codeit';

혹은 키워드와 변수이름, 그리고 할당연산자와 값으로 선언과 동시에 값을 할당해 줄 수도 있습니다.

var myVariable = 'codeit';

중복 선언 허용

var 키워드로 선언한 변수의 첫 번째 문제는, let과 const와는 다르게 중복 선언이 가능하다는 겁니다.
똑같은 이름으로 변수를 한 번 더 선언하게 되면, 에러가 발생하는 것이 아니라 그냥 기존의 변수를 덮어써 버리는 것이죠. let키워드로 선언한 변수에 값을 재할당하는 것과는 엄연히 다릅니다.

var myVariable = 'codeit';
console.log(myVariable);
var myVariable = 'Codeit!';
console.log(myVariable);

codeit
Codeit!

이렇게 변수가 중복선언이 되면, 길고 복잡한 코드를 작성할 때 실수를 할 가능성이 커지고, 상황에 따라서는 치명적인 오류가 발생할 수 있습니다.
함수 스코프

var 키워드 변수가 사라진 두 번째 문제는 Scope의 문제입니다. 
let과 const 키워드로 선언한 변수는 if, for, function 등등 어떤 키워드와 관계없이 코드 블록, 즉 {} 중괄호로 감싸진 부분을 기준으로 scope를 갖게 되지만, var 키워드로 선언한 변수는 scope가 function에서만 구분되어 있습니다.

{
  let x = 3;
}

function myFunction() {
  let y = 4;
}

console.log(x);
console.log(y);

Uncaught ReferenceError: x is not defined

let이나 const 키워드의 경우에는 중괄호로 감싸진 경우라면 모두 중괄호 밖에서는 지역 변수에 접근할 수 없습니다.

{
  var x = 3;
}

function myFunction() {
  var y = 4;
}

console.log(x);
console.log(y);

3
Uncaught ReferenceError: y is not defined

하지만 var 변수는 지역변수의 구분이 함수에만 있기 때문에 if, for, while, switch 등 다양한 상황에서 선언한 변수가 자칫, 전역변수의 역할을 하게 될 수도 있는 것이죠.

참고로 이렇게 함수를 기준으로만 적용되는 스코프를 함수 스코프, 코드 블록을 기준으로 적용되는 스코프를 블록 스코프라는 용어를 사용한다는 점도 참고해 주세요! :)
끌어올림 (Hoisting)

console.log(myVariable);
let myVariable;

Uncaught ReferenceError: Cannot access 'myVariable' before initialization

let과 const로 선언한 변수는 선언되기 이전에 사용될 수 없습니다. 하지만, var 변수는 함수 스코프를 기준으로 선언되기 이전에도 변수에 접근이 가능한데요.

console.log(myVariable);
var myVariable;

undefined

변수의 선언이 끌려 올라가서 마치, 2번째 줄과 첫 번째 줄이 바뀐 것처럼 동작하는 데요.

var myVariable;
console.log(myVariable);

이렇게 변수가 끌어올려 지는 현상을 '호이스팅(hoisting)'이라고 부른다는 점도 기억해 두시면 좋을 것 같아요 :)
다행히 호이스팅은 선언과 동시에 값을 할당하더라도, 선언문만 올려지기 때문에 값은 그대로 두 번째 줄에 남아있는 데요.

console.log(myVariable);
var myVariable = 2;
console.log(myVariable);

undefined
2

하지만 이런 식으로 동작하는 방식은 코드의 흐름을 방해하기에 충분해 보이죠? 한 가지 주의해야 될 부분은, 함수를 선언할 때도 이 호이스팅이 적용됩니다.

sayHi();

function sayHi() {
  console.log('hi');
}

이렇게 코드를 작성하더라도 실행해보면,

hi

당연한 듯 함수가 잘 실행되는 모습을 확인할 수 있습니다.

이런 현상은 함수를 한 번 선언하고 나면 어디서든 유연하게 사용할 수 있다는 장점이 있지만, 코드의 흐름에는 부정적인 영향을 끼칠 수 있습니다. 그래서 함수를 선언할 떄는 가급적 코드 윗부분에 선언하거나, 호출을 항상 아래쪽에서 한다거나 나름대로 규칙을 세워서 코드를 작성하시기를 권장드립니다 :)

자, 지금까지 오래된 자바스크립트에서 변수를 만들 때 사용했던 var 키워드에 대해서 살펴봤는데요.
요즘은 잘 사용되지 않지만, 그래도 자바스크립트의 상식적인 측면에서 가볍게 이해하고 계시면 좋을 것 같습니다! :)

--------------------------------------------------------------------------------------------------------------





