JS 에는 다양한 숫자 표현 방법이 있다

ex) 
let num = 2e9 (지수 표기법)
console.log(num) -> 2000000000

ex)
let num = -2e-3
console.log(num)  ->  -0.002

그리고 JS는 16진수 8진수 그리고 2진수를 표현하는 방법도 있다

//16진법 (Hexadecimal)
let hex1 = 0xff; // 255
let hex2 = 0xFF; // 255

//8진법 (Octal)
let octal = 0o377; //255

//2진법 (binary numeral system)
let binary = 0b11111111; // 255

console.log(hex1);
console.log(hex2);
console.log(octal);
console.log(binary);

--------------------------------------------------------------------------------------------------------------------------------

숫자도 객체이다 숫자형이 가지고 있는 메소드는 다루기 어려운데 이번에 두개만 다뤄보자

toFixed 메소드
소수를 다룰 때 사용되며 소수점 아래에 자리수를 고정할 때 사용한다 (반올림 한다) 범위는 0 부터 100 까지이고 만약에 패러미터로 들어가는 숫자가 숫자값의 자리수를 초과하는 경우에는 0으로 대체된다

let num =0.3567

console.log(num.toFixed(3)) -> 0.357
console.log(num.toFixed(7)) -> 0.3567000

주의해야할 점은 toFixed 메소드가 반환하는 값이 string 이라는 것이다 그래서 toFixed 가 반환하는 값을 숫자로 활용하려면 number 함수를 이용해서 숫자형으로 바꿔줘야한다 단 이때 자리수 채우기로 들어간 0 
은 제거된다

한가지 팁이 있는데 JS에서는 어떤 값 앞에 +를 붙이면 number 함수와 똑같은 결과를 얻을 수 있다
ex) console.log(+num.toFixed(7)) -> 0.3567

toString 메소드
패리미터로 전달하는 숫자의 진법으로 숫자를 변형시켜준다 범위는 2부터 36 까지이다 반환하는 값은 역시 문자열이다 

let num =125

console.log(num.toString(2)) -> 1111101
console.log(num.toString(8)) -> 175
console.log(num.toString(16)) -> 7d

마지막으로 한가지 집고 넘어갈 것이 있는데 지금까지는 변수에 숫자형을 담은 후 변수에 점 표기봅을 써 메소드를 호출했는데 변수에 담지 않고 숫자형에 바로 쓸 수도 있다 단 
255.toString(16) 이런식으로는 못쓴다 이렇게 쓰면 이 . 은 소수점을 시작하는 . 으로 인식되기 때문이다 그래서 정수형의 숫자값에는 메소드를 사용할 때 .. 이렇게 점 두개를 써줘야한다
-> 255..toString(16)   
또 다른 방법으로는 양옆에 괄호를 씌어줘도 된다

let num =125

console.log(125..toFixed(2)) -> 125.00
console.log(125.1.toFixed(2)) -> 125.10
console.log((125).toFixed(2)) -> 125.00

----------------------------------------------------------------------------------------------------------------------------------------------------

Date객체처럼 자바스크립트의 내장 객체 중 다양한 연산들을 유용하게 사용하기 위해 Math라는 객체가 있습니다.

이번 노트에서는 Math객체의 다양한 메소드에 대해 살펴봅시다.
절댓값 (Absolute Number)

학창 시절 수학 시간에서 배운 '절댓값(absolute value)' 기억하시나요?

간단하게 설명하자면, 어떤 값의 '양수(positive number)' 버전이라고 할 수 있습니다. 음수 -5의 절댓값은 양수 5고, 그냥 양수 5의 절댓값은 그대로 양수 5인 거죠.

Math.abs(x)를 하면 x의 절댓값이 리턴됩니다.

console.log(Math.abs(-10));
console.log(Math.abs(10));

10
10

최댓값 (Maximum)

Math.max 함수에 파라미터로 여러 수를 넘겨주면, 그중 가장 큰 값이 리턴됩니다.

console.log(Math.max(2, -1, 4, 5, 0));

5

최솟값 (Minimum)

Math.min 함수에 파라미터로 여러 수를 넘겨주면, 그중 가장 작은 값이 리턴됩니다.

console.log(Math.min(2, -1, 4, 5, 0));

-1

거듭제곱 (Exponentiation)

'제곱'의 개념 기억하시나요? '2의 3승'(혹은 '2의 세제곱')을 하면, 2를 세 번 곱한다는 뜻입니다. '2 곱하기 2 곱하기 2'를 하면 8이죠? 마찬가지로 '5의 2승'을 하면, '5 곱하기 5'를 해서 25입니다.

자바스크립트에서 Math.pow(x, y)를 하면 x의 y승의 결괏값이 리턴됩니다.

console.log(Math.pow(2, 3));
console.log(Math.pow(5, 2));

8
25

제곱근 (Square Root)

'제곱근(square root)'은 '제곱'의 반대라고 생각할 수 있습니다. 5의 제곱이 25이기 때문에, 25의 제곱근은 5입니다. 7의 제곱이 49이기 때문에, 49의 제곱근은 7입니다.

Math.sqrt(x)를 하면 x의 제곱근이 리턴됩니다.

console.log(Math.sqrt(25));
console.log(Math.sqrt(49));

5
7

반올림 (Round)

Math.round(x)를 하면 x의 반올림된 값이 리턴됩니다. 소수점 부분이 0.5 이상이면 가장 가까운 정숫값으로 올라가고, 소수점 부분이 0.5 미만이면 가장 가까운 정숫값으로 내려갑니다.

console.log(Math.round(2.3));
console.log(Math.round(2.4));
console.log(Math.round(2.49));
console.log(Math.round(2.5));
console.log(Math.round(2.6));

2
2
2
3
3

버림과 올림 (Floor and Ceil)

Math.floor(x)을 하면 x의 버림 값이, Math.ceil(x)을 하면 x의 올림 값이 리턴됩니다. 이 경우, 소수 부분이 얼마 인지와는 상관이 없습니다.

console.log(Math.floor(2.4));
console.log(Math.floor(2.49));
console.log(Math.floor(2.8));
console.log('-');
console.log(Math.ceil(2.4));
console.log(Math.ceil(2.49));
console.log(Math.ceil(2.8));

2
2
2
-
3
3
3

난수 (Random)

Math.random을 하면 0 이상 1 미만의 값이 랜덤으로 리턴됩니다.

console.log(Math.random());
console.log(Math.random());
console.log(Math.random());
console.log(Math.random());

0.21458369059793236
0.6622040803059857
0.785172717569619
0.9056556038884926

그리고...

이뿐만 아니라 '삼각 함수 계산'이나 '로그'같은 더 깊은 수학 계산도 가능합니다. 더 깊게 알아보고 싶다면 이 링크 를 참고해보세요!
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Math
----------------------------------------------------------------------------------------------------------------------------------------








