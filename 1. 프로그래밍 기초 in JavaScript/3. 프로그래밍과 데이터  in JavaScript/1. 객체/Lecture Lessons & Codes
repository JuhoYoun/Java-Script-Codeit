객체 Object

지금까지는 변수 하나에 문자열 하나 숫자 하나 이렇게 저장했는데 여러가지 값을 한번에 저장하고 싶다면? 객체라는것을 사용하면 된다 JavaScript의 모든 것은 객체다 라는 말이 있을 정도로 객체는
JavaScript의 거의 모든 문법에 녹아있는 개념이다 JS를 잘 다루려면 이 객체를 잘 이해해야 한다 자 그럼 먼저 객체를 만드는 법을 배워보자 객체는 중괄호 {} 를 통해 만들 수 있다
중괄호 안에는 여러가지 다양한 값들을 쉼표 , 로 구분해서 저장할수 있다 객체에는 이런 다양한 값이 들어갈 수 있기 때문에 각 값들을 좀 더 명확하게 하기 위해 콜론 : 과 함께 이 값들의 이름을 지어줘야한다
그래서 값들은 영어로 value 라고 하고 이 값의 이름을 key 라고 한다 이렇게 key-value 한 쌍을 객체의 속성 property 라고 한다 그리고 왼편에 key를 property name 이라고도 부르고 오른편의 값들을
property value 로도 부른다 

ex)
{
  brandName : "codeit",
  bornYear : 2020,
  isNice : True,
  worstCourse : null
}

이 프로퍼티를 좀 더 살펴보면 우선 프로퍼티 네임은 문자열 타입을 가지고 있다 사실 프로퍼티 네임을 쓸 때 "brandName" 이렇게 따옴표로 써줘야하지만 이렇게 안해줘고 JS가 암묵적으로 형 변환을 한다 일반적으로
위 처럼 따옴표를 생략하고 사용한다 하지만 따옴표를 생략할 땐 변수의 이름을 지을 때와 비슷하게 몇가지 주의해야될 부분이 있는데 첫번째로 첫 글자는 반드시 문자, 밑줄 _ , 달러기호 $ 중 하나로 시작해야하고
두번째는 띄어쓰기를 할수 없고 세번째는 하이픈 - 을 쓸 수 없다 만약 불가피하게 이런 규칙을 벗어나는 경우에는 반드시 따옴표로 감싸줘야한다 
반면에 프로퍼티 밸류는 모든 자료형을 사용할 수 있고 심지어 객체 안에 객체를 넣을 수도 있다 ( 프로퍼티 밸류가 객체 )

* typeof(객체) -> object 
------------------------------------------------------------------------------------------------------------------------------

객체에서 데이터에 접근하기 

객체도 결국은 값이기 때문에 일단 객체를 다루기 위해서는 먼저 변수에 할당해 주면서 이름을 만들어줘야한다 

let codeit = {
  brandName : "codeit",
  bornYear : 2020,
  isNice : True,
  worstCourse : null,
  bestCourse = {
    title : "JavaScript"
    language = "JavaScript"
  }
};

객체의 프로퍼티에 접근하는 방법은 두가지가 있다 하나는 점 표기법이다

ex) codeit.bornYear -> return 2020

이 방법은 가장 간단하고 자주 쓰이는데 한가지 단점은 따옴표를 생략할 수 없는 프로퍼티 네임으로는 접근할 수가 없다 만약에 프로퍼티 네임이 "born year" 라면 
codeit.born year 이렇게 써야하는데 이럴 경우 codeit.born과 year을 다른 문장으로 인식하게 되어 접근할 수 없다 이런식으로 점 표기법이 불가능한 경우에는 대괄호 표기법을 사용한다

대괄호 표기법

ex) codeit['born year'] -> return 2020
ex)
let propertyName = "born year"
codeit[propertyName] -> return 2020

그러면 객체 안의 객체는 어떻게 접근할까? -> 프로퍼티 네임을 계속 연결하면 된다 

ex) codeit.bestCourse.title -> return "JavaScript"
ex) codeit.bestCourse['title'] -> return "JavaScript"

그런데 만약 존재하지 않는 프로퍼티에 접근하려한다면?

ex) codeit.teacher -> undefined 를 리턴한다 에러가 아니라 undefined를 반환한다!
-----------------------------------------------------------------------------------------------------------------------------

객체 다루기

객체의 프로퍼티를 수정하고 추가하고 삭제하기 

수정하기 
해당 프로퍼티로 접근해서 새로운 값을 할당해주면 된다 

ex) codeit.name = "코드잇"

추가하기
이런식으로 객체에 프로퍼티를 추가해줄 수도 있다 

ex) codeit.ceo = "Jake"

삭제하기
delete 연산자를 활용한다

ex) delete codeit.worstCourse  -> 삭제됨 나중에 해당 프로퍼티에 접근하려 그러면 존재 하지 않기 때문에 undefined 라고 뜬다


in 연산자 
어떤 프로퍼티가 존재하는지 확인하려면 code.worstCourse !== undefined   이런 불일치 비교를 해서 확인할 수 있는데 in 연산자로도 할 수 있다 

ex) 'name' in codeit  ->  프로퍼티 네임(문자열) in 객체   -> boolean 값을 반환한다 객체안에 어떤 이름을 가진 프로퍼티가 있는지 확인하는것이다

undefined 불일치 비교를 해서 구할 수 있는데 이렇게 in 연산자가 있는 이유? 일단은 좀 더 간단하고 프로퍼티를 확인할 때 좀 더 안전하게 할 수 있다 만약에 worstCourse 라는 프로퍼티가 실재로 있고 
그 프로퍼티 밸류가 실수로 undefined 으로 들어간 경우 프로퍼티는 존재하지만 undefined 불일치로 확인하면 프로퍼티가 존재하지 않다고 판단될수 있다 
-------------------------------------------------------------------------------------------------------------------------------------------

객체와 메소드

연관성이 있는 여러 함수들을 하나로 묶을 때도 객체를 사용할 수 있다 객체의 프로퍼티는 어떤 자료형이든 넣을 수 있다 함수도 가능하다 이런 함수를 객체의 메소드 라고 한다

ex)

let greetings = {
  sayHello: function () {
    console.log('Hello');
  },
  sayHi: function () {
    console.log('Hi');
  },
  sayBye: function () {
    console.log('Bye');
  }
}

위 객체를 보면 프로퍼티 값으로 함수를 정의하고 있다 function 키워드 다음에 이름 없이 바로 소괄호와 중괄호를 열어 함수를 정의했다 함수 이름은 프로퍼티 네임이 대신해주기 때문이다 이렇게하면
greetings 이라는 객체의 세가지 메소드가 정의된 것이다 이 메소드들을 사용하려면 -> greetings.sayHello()  이런식으로 사용하면 된다

사실 함수라고 불렀던 console.log() 도 console이라는 객체의 log() 메소드였던 것이다

메소드를 사용할 때 점 표기법을 많이 사용하지만 대괄호 표기법을 사용해도 상관 없다 근데 대괄호 표기법에서 함수 패러미터를 넣는 소괄호는 대괄호 뒤에 오는것을 잘 기억해라
->
greerings["sayHello"]();

메소드는 어떤 객체의 고유한 동작으로서 함수에 의미를 부여할 수 있다

ex)
let triangle = {
  width : 30
  height : 15
  getarea: function () {
    return triangle.width * triangle.height / 2;
  }
};

----------------------------------------------------------------------------------------------------------------------------------------

for in 반복문

for in 반복문은 객체 안에 있는 프로퍼티들을 가지고 반복적인 동작을 수행할 때 사용한다 객체의 프로퍼티 네임을 가져오는 반복문이기 때문에 일반적인 for문으로는 대체할 수 없는 조금 특별한 반복문이다
기본적인 구조부터 살펴보면 일반적인 for문과 비슷하지만 소괄호 내부가 조금 다른데 소괄호 내부에서 특정한 변수를 만들고 in 이라는 키워드 다음에 반복할 객체를 넣어주게되면 이 객체의 프로퍼티 네임이 변수에 할당되고
객체의 프로퍼티 개수만큼 반복 동작을 하게 된다

for (변수 in 객체) {
  동작부분
}

ex)
for (let key in codeit) {
  console.log(key);
}

let은 뭐지?? key라는 로컬 변수 선언인거 같다!
-------------------------------------------------------------------------------------------------------------------------------------------

for in문을 활용하면 객체 내부에 있는 모든 프로퍼티들을 하나씩 다룰 수 있다고 배웠습니다.

지금까지 살펴본 바로는, for in 반복문이 실행될 때 따로 정해진 순서 없이 객체에 추가한 순서를 따라서 반복문이 수행된걸 볼 수 있는데요.

그런데 이 코드를 한번 보세요.

let myObject = {
  '2': '알고리즘의 정석',
  '3': '컴퓨터 개론',
  '1': '자바스크립트 프로그래밍 기초',
};

for (let key in myObject) {
  console.log(myObject[key]);
}

자바스크립트 프로그래밍 기초
알고리즘의 정석
컴퓨터 개론

분명히 객체를 작성할 때는 알고리즘의 정석, 컴퓨터 개론, 자바스크립트 프로그래밍 기초 순서로 작성했는데, 뭔가 우리가 작성한 순서와 다르게 for in 반복문이 수행되었습니다.

왜 이렇게 된 걸까요!? 객체의 프로퍼티는 어떤 순서로 정렬이 되는 걸까요!?

반복문을 사용할 때 이 순서를 알지 못하면, 방금처럼 의도치 않은 결과를 얻게 될 수도 있습니다. 상황에 따라서는 치명적인 오류로 이어질 수도 있겠죠? 그럼 객체의 프로퍼티 네임의 예외사항과 함께 객체의 정렬 방식에 대해서 조금 더 살펴봅시다.
숫자형(양수) 프로퍼티 네임

흔한 경우는 아니라서, 처음 객체를 배우는 레슨에서 다루진 않았지만 사실 프로퍼티 네임에는 숫자형(양수)을 작성해서 사용할 수도 있습니다.

let myObject = {
  300: '정수',
  1.2: '소수',
};

다만 실제로 사용될 때는 문자열로 형 변환이 되어 사용되는데요.

let myObject = {
  300: '정수',
  1.2: '소수',
};

for (let key in myObject) {
  console.log(`${key}의 자료형은 ${typeof key}입니다.`);
}

이렇게 for in 문을 활용해서 각 프로퍼티 네임들의 자료형을 확인해보면, 모두 string, 문자열이 출력되는걸 볼 수 있습니다.

300의 자료형은 string입니다.
1.2의 자료형은 string입니다.

그리고 이렇게 예외적인 파라미터 네임은 접근할 때도 대괄호표기법으로만 접근이 가능합니다.

let myObject = {
  300: '정수',
  1.2: '소수',
};

console.log(myObject['300']);
console.log(myObject['1.2']);
console.log(myObject.300); // Error!
console.log(myObject.1.2); // Error!

정수형 프로퍼티 네임

객체의 프로퍼티 네임으로 숫자형을 그대로 사용할 수도 있다는 점을 살펴봤는데요. 
for in문을 사용할 때 주의해야 할 순간은 바로 정수형 프로퍼티 네임이 있을 때 입니다.
객체는 정수형 프로퍼티 네임을 오름차순으로 먼저 정렬하고, 나머지 프로퍼티들은 추가한 순서대로 정렬하는 특징이 있습니다.

let myObject = {
  3: '정수3',
  name: 'codeit',
  1: '정수1',
  birthDay: '2017.5.17',
  2: '정수2',
};

for (let key in myObject) {
  console.log(key);
}

이 코드를 그대로 실행해보면 아래와 같은 결과가 출력되는데요.

1
2
3
name
birthDay

분명히 3, name, 1, birthday, 2순서로 프로퍼티가 작성되었음에도 불구하고, for in문이 실행될 때는 오름차순으로 정렬이 되어 출력이 된 모습을 확인할 수 있습니다.
굳이 for문을 그대로 작성하지 않고도 그냥 콘솔에 myObject를 콘솔에 출력만 해봐도

{1: "정수1", 2: "정수2", 3: "정수3", name: "codeit", birthDay: "2017.5.17"}

객체가 정수형 프로퍼티에 한해서 오름차순으로 정렬이 되고 나머지는 추가한 순서대로 정렬이 되는 걸 확인할 수 있죠?
처음에 살펴봤던 것처럼 정수형 프로퍼티에 따옴표를 붙여 문자열처럼 만들더라도, 정렬방식은 동일하게 처리됩니다.

let myObject = {
  '3': '정수3',
  name: 'codeit',
  '1': '정수1',
  birthDay: '2017.5.17',
  '2': '정수2',
};

for (let key in myObject) {
  console.log(key);
}

1
2
3
name
birthDay

자동으로 정렬되는 특성이 장점처럼 느껴질 수도 있지만 대부분의 경우에는 의도치 않은 결과를 가져올 수도 있기 때문에, 일반적으로 정수형 프로퍼티는 잘 사용되지 않는데요.

그래서 불가피한 경우에는 이런 객체의 정렬방식을 잘 이해한 상태에서 사용하고, 가급적 명확한 의미가 있는 프로퍼티 네임을 사용하시는걸 권장해 드립니다.
-------------------------------------------------------------------------------------------------------------------------------------------------

Date 객체

내장 객체 ( Standard built-in objects)

console 처럼 JS가 미리 가지고 있는 객체를 내장 객체라고 한다

이와 같이 JS는 다양한 객체가 있는데 날짜는 모두 Date객체로 다룬다 

변수 선언

let myDate = new Date();

이제 이 객체를 출력해보면 이 객체를 생성한 시간이 출력된다

console.log(myDate);  -> 맨 왼쪽부터 요일 월 일 년도 시간 시간대 이 순서대로 나온다

그런데 Date 객체는 무조건 생성 순간으로만 만들어질까? Date 객체를 생성할 때 () 안에 특정한 값을 넣어주면 우리가 원하는 날짜를 생성할 수도 있다

먼저 Date 객체를 생성할 때 소괄호에 숫자값을 넣어주면 UTC 기준 1970년 1월 1일 0시 00분 00초에서 넣어준 숫자값의 밀리 초 mili second 만큼 지난 객체가 만들어진다 mili sec 은 1000분의 1 sec 이다

그래서 만약에 let myDate = new Date(1000); 라고 하고 console.log(myDate) 하면 1970년 1월 1일 0시 00분 01초가 되는것이다 

그런데 이렇게 쓸 경우 계산 하기 힘든 매우 큰 숫자를 매번 소괄호 안에 넣어줘야한다 더 편하게 쓰는 방법이 있는데 날짜로 해석 될 수 있는 문자열을 넣어주면 된다

만약 2017년 5월 18일 객체를 만들고 싶으면 "2017-05-18" 를 넣어주면 되고 만약 더 자세히 시간까지 다루고 싶다면 알파벳 T를 입력한 후 24시간 표기 형태로 써주면 된다
-> "2017-05-18T19:11:16"

위의 두 경우처럼 Date 객체를 만들고 console.log() 로 출력해보면 날짜만 설정했을 때는 자정 기준으로 시간까지 정해주면 그 시간까지 설정되서 출력된다 

그리고 마지막 한가지 방법이 더 있다 소괄호 안에 여러가지 값을 전달해주는 방식이 있다 new Date(값, 값, 값, 값 ...);

연도 월 일 시 분 초 밀리초 순서대로 입력하면 되고 (숫자형으로 넣는다) 연도와 월 까지는 필수이고 나머지는 생략이 가능하다 생략할 경우에는 1일 0시 0분 0초 0 밀리초로 된다 한가지 주의할 점은 여기서 
month는 0부터 시작한다 우리가 생각하는 1월은 컴퓨터한테는 0월이다~ 요일은 0부터 6이다~ 일요일부터 토요일~

자 이렇게 생성한 객체는 다양한 메소드를 이용해서 필요한것만 가져올 수 있다

getTime 메소드 

getTime 메소드를 사용하면 UTC 1970년 1월 1일 0시 0분 0초에 맞춰서 몇 밀리초가 지났는지 계산해준다 이 정숫값을 Time Stamp 라고 부른다

이 메소드를 이용하면 특정한 두 시간의 차를 계산할 수 있다 -> date1.getTime() - date2.getTime()

------------------------------------------------------------------------------------------------------------------------------

Date 객체 정보 수정하기

set으로 시작하는 다양한 메서드를 활용하면, 생성된 Date객체의 정보를 수정할 수도 있습니다.

(대괄호로 감싸진 요소들은 선택적인 요소입니다.)

    setFullYear(year, [month], [date])  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear
    setMonth(month, [date])  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth
    setDate(date)  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate
    setHours(hour, [min], [sec], [ms])  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours
    setMinutes(min, [sec], [ms])  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes
    setSeconds(sec, [ms])  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds
    setMilliseconds(ms)  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds
    setTime(milliseconds)(1970년 1월 1일 00:00:00 UTC부터 밀리초 이후를 나타내는 날짜를 설정)  https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime

let myDate = new Date(2017, 4, 18, 19, 11, 16);

myDate.setFullYear(2002);
myDate.setMonth(6);
myDate.setDate(20);

간단하게 시간 정보 알아내기!

간단하게 시간 정보를 표현하고 싶다면 아레와 같은 메소드를 활용해 볼 수도 있습니다.

let myDate = new Date();

console.log(myDate.toLocaleDateString()); // myDate가 가진 날짜에 대한 정보 (년. 월. 일)
console.log(myDate.toLocaleTimeString()); // myDate가 가진 시간에 대한 정보 (시:분:초)
console.log(myDate.toLocaleString()); // myDate가 가진 날짜와 시간에 대한 정보 (년. 월. 일 시:분:초)

toLocaleDateString(), toLocaleTimeString(), toLocaleString() 메소드는 사용자의 브라우저에 설정된 국가의 표기에 맞춰 날짜와 시간을 보여줍니다. 
직접 코드를 실행해서 결과를 확인해 보세요! :)
똑똑한 Date?!

Date 객체엔 자동으로 날짜를 수정해주는 유용한 기능이 있습니다. 범위를 벗어나는 값을 설정하려고 하면 자동으로 날짜를 수정해줍니다.

let myDate = new Date(1988, 0, 32); // 1988년 1월 32일은 없습니다

// 2월 1일로 자동고침 되는걸 확인할 수 있습니다.
console.log(myDate) // Mon Feb 01 1988 00:00:00

지금 이 순간..!?

Date.now() 메소드는 이 메소드가 호출된 시점의 타임스탬프를 반환합니다. 이렇게 하면 새로운 객체를 만들지 않아도 바로 현 시점의 날짜 값을 얻어낼 수 있는 것이죠!

let myDate = new Date();

console.log(Date.now() === myDate.getTime()); // true

위 코드를 보시면 알 수 있듯이 새로운 객체를 만들어서 getTime 메소드를 호출한 값과 일치한다는 사실을 확인할 수 있는데요.
새로운 객체를 만들지 않는다는 점은 일단 우리 눈에 코드 한 줄을 줄일 수 있다는 이점도 있고, 눈에는 드러나지 않지만 코드가 실행될 때 메모리의 부담을 줄여주기도 합니다.
그래서 특정한 시점이 아니라 단순히 순간순간 그 때 당시 시간 값이 필요한 경우에는 Date.now() 메소드를 활용하는 것이 코드의 가독성 뿐만아니라 성능적인 측면에서도 좀 더 유리합니다.
Date객체의 형변환

let myDate = new Date(2017, 4, 18);

console.log(typeof myDate); // object
console.log(String(myDate)); // Thu May 18 2017 00:00:00 GMT+0900 (Korean Standard Time)
console.log(Number(myDate)); // 1495033200000
console.log(Boolean(myDate)); // true

이 코드를 천천히 살펴봅시다. 세번째 줄에서 Date 객체의 자료형을 확인해보니 'object', 즉 객체라는 것을 확인할 수 있는데요.
Date 객체를 boolean 타입으로 변환하면 true가 되고, string 타입으로 변환하면 날짜값이 그대로 문자열로 변환이 됩니다.

우리가 눈여겨 볼 부분은 number 타입으로 변환할 경우입니다. 
이 값은 아무 의미없는 단순한 숫자값이 아니라 getTime() 메소드를 활용한 것과 똑같은 수치의 타임스탬프 값 입니다.

let myDate = new Date(2017, 4, 18);

console.log(myDate.getTime() === Number(myDate)); // true

이것은 다시 말해 Date 객체끼리 바로 사칙 연산도 충분히 가능하다는 뜻이기도 한데요.

let myDate1 = new Date(2017, 4, 18);
let myDate2 = new Date(2017, 4, 19);

let timeDiff = myDate2 - myDate1;
console.log(timeDiff); // 86400000 (ms)
console.log(timeDiff / 1000); // 86400 (sec)
console.log(timeDiff / 1000 / 60) // 1440 (min)
console.log(timeDiff / 1000 / 60 / 60) // 24 (hour)
console.log(timeDiff / 1000 / 60 / 60 / 24) // 1 (date)

이렇게 하니깐 두 Date객체 사이의 시간차이를 어렵지 않게 확인할 수 있죠?
날짜를 표현하는 문자열

YYYY-MM-DDThh:mm:ss형식 말고도 날짜를 표현하는 다양한 방식의 문자열이 있습니다.

let date1 = new Date('12/15/1999 05:25:30');
let date2 = new Date('December 15, 1999 05:25:30');
let date3 = new Date('Dec 15 1999 05:25:30');

하지만 이런 방식을 사용하다보면 브라우저나, 컴퓨터를 사용하는 위치의 시간대에 따라 서로 다른 결과 값이 나올 수도 있기 때문에 적어도 IETF 호환 RFC 2822 타임스탬프와 ISO8601의 한 버전의 형식을 준수하는 문자열로 Date객체를 생성하는 것을 권장드립니다!
https://datatracker.ietf.org/doc/html/rfc2822#page-14
https://262.ecma-international.org/5.1/#sec-15.9.1.15

더 많은 내용을 알고싶다면 이 링크를 참고해보세요!
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date


------------------------------------------------------------------------------------------------------------------------------------


