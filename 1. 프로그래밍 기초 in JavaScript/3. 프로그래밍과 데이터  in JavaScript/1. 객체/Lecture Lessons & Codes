객체 Object

지금까지는 변수 하나에 문자열 하나 숫자 하나 이렇게 저장했는데 여러가지 값을 한번에 저장하고 싶다면? 객체라는것을 사용하면 된다 JavaScript의 모든 것은 객체다 라는 말이 있을 정도로 객체는
JavaScript의 거의 모든 문법에 녹아있는 개념이다 JS를 잘 다루려면 이 객체를 잘 이해해야 한다 자 그럼 먼저 객체를 만드는 법을 배워보자 객체는 중괄호 {} 를 통해 만들 수 있다
중괄호 안에는 여러가지 다양한 값들을 쉼표 , 로 구분해서 저장할수 있다 객체에는 이런 다양한 값이 들어갈 수 있기 때문에 각 값들을 좀 더 명확하게 하기 위해 콜론 : 과 함께 이 값들의 이름을 지어줘야한다
그래서 값들은 영어로 value 라고 하고 이 값의 이름을 key 라고 한다 이렇게 key-value 한 쌍을 객체의 속성 property 라고 한다 그리고 왼편에 key를 property name 이라고도 부르고 오른편의 값들을
property value 로도 부른다 

ex)
{
  brandName : "codeit",
  bornYear : 2020,
  isNice : True,
  worstCourse : null
}

이 프로퍼티를 좀 더 살펴보면 우선 프로퍼티 네임은 문자열 타입을 가지고 있다 사실 프로퍼티 네임을 쓸 때 "brandName" 이렇게 따옴표로 써줘야하지만 이렇게 안해줘고 JS가 암묵적으로 형 변환을 한다 일반적으로
위 처럼 따옴표를 생략하고 사용한다 하지만 따옴표를 생략할 땐 변수의 이름을 지을 때와 비슷하게 몇가지 주의해야될 부분이 있는데 첫번째로 첫 글자는 반드시 문자, 밑줄 _ , 달러기호 $ 중 하나로 시작해야하고
두번째는 띄어쓰기를 할수 없고 세번째는 하이픈 - 을 쓸 수 없다 만약 불가피하게 이런 규칙을 벗어나는 경우에는 반드시 따옴표로 감싸줘야한다 
반면에 프로퍼티 밸류는 모든 자료형을 사용할 수 있고 심지어 객체 안에 객체를 넣을 수도 있다 ( 프로퍼티 밸류가 객체 )

* typeof(객체) -> object 
------------------------------------------------------------------------------------------------------------------------------

객체에서 데이터에 접근하기 

객체도 결국은 값이기 때문에 일단 객체를 다루기 위해서는 먼저 변수에 할당해 주면서 이름을 만들어줘야한다 

let codeit = {
  brandName : "codeit",
  bornYear : 2020,
  isNice : True,
  worstCourse : null,
  bestCourse = {
    title : "JavaScript"
    language = "JavaScript"
  }
};

객체의 프로퍼티에 접근하는 방법은 두가지가 있다 하나는 점 표기법이다

ex) codeit.bornYear -> return 2020

이 방법은 가장 간단하고 자주 쓰이는데 한가지 단점은 따옴표를 생략할 수 없는 프로퍼티 네임으로는 접근할 수가 없다 만약에 프로퍼티 네임이 "born year" 라면 
codeit.born year 이렇게 써야하는데 이럴 경우 codeit.born과 year을 다른 문장으로 인식하게 되어 접근할 수 없다 이런식으로 점 표기법이 불가능한 경우에는 대괄호 표기법을 사용한다

대괄호 표기법

ex) codeit['born year'] -> return 2020
ex)
let propertyName = "born year"
codeit[propertyName] -> return 2020

그러면 객체 안의 객체는 어떻게 접근할까? -> 프로퍼티 네임을 계속 연결하면 된다 

ex) codeit.bestCourse.title -> return "JavaScript"
ex) codeit.bestCourse['title'] -> return "JavaScript"

그런데 만약 존재하지 않는 프로퍼티에 접근하려한다면?

ex) codeit.teacher -> undefined 를 리턴한다 에러가 아니라 undefined를 반환한다!
-----------------------------------------------------------------------------------------------------------------------------

객체 다루기

객체의 프로퍼티를 수정하고 추가하고 삭제하기 

수정하기 
해당 프로퍼티로 접근해서 새로운 값을 할당해주면 된다 

ex) codeit.name = "코드잇"

추가하기
이런식으로 객체에 프로퍼티를 추가해줄 수도 있다 

ex) codeit.ceo = "Jake"

삭제하기
delete 연산자를 활용한다

ex) delete codeit.worstCourse  -> 삭제됨 나중에 해당 프로퍼티에 접근하려 그러면 존재 하지 않기 때문에 undefined 라고 뜬다


in 연산자 
어떤 프로퍼티가 존재하는지 확인하려면 code.worstCourse !== undefined   이런 불일치 비교를 해서 확인할 수 있는데 in 연산자로도 할 수 있다 

ex) 'name' in codeit  ->  프로퍼티 네임(문자열) in 객체   -> boolean 값을 반환한다 객체안에 어떤 이름을 가진 프로퍼티가 있는지 확인하는것이다

undefined 불일치 비교를 해서 구할 수 있는데 이렇게 in 연산자가 있는 이유? 일단은 좀 더 간단하고 프로퍼티를 확인할 때 좀 더 안전하게 할 수 있다 만약에 worstCourse 라는 프로퍼티가 실재로 있고 
그 프로퍼티 밸류가 실수로 undefined 으로 들어간 경우 프로퍼티는 존재하지만 undefined 불일치로 확인하면 프로퍼티가 존재하지 않다고 판단될수 있다 
-------------------------------------------------------------------------------------------------------------------------------------------







