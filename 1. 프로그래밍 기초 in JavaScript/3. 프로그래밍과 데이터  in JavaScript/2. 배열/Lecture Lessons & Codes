배열 array

ex)
let courseRanking = [
  'Java',
  'JavaScript',
  'Python',
  'C++'
]

배열 안의 요소들을 영어로 element라고 한다 배열의 요소들은 순서가 있다 (index) 이 index 가 객체랑 비교했을 때 배열의 프로퍼티 네임이 되는것이다

배열의 요소를 가져오는 방법은 객체의 대괄호 표기법과 동일하다 -> 배열이름[index] 이렇게 인덱스를 통해 요소에 접근하는 것을 인덱싱이라고 한다 인덱스는 0부터 시작한다
값들에 순서나 순위가 있다면 배열이 편할 수도 있다
-----------------------------------------------------------------------------------------------------------------------------------------

배열 다루기 

사실 배열도 객체이다 typeof 로 배열의 자료형을 보면 object 라고 나온다 배열도 JS에서 미리 만들어논 조금 특별한 객체인것이다 배열 객체에도 다양한 프로퍼티와 메소드가 있다 

lenth 프로퍼티 
an_array.length -> 배열의 원소가 몇개인지 반환    an_array['length'] 대괄호 표기법

배열의 추가/수정

an_array[index] = "some value";

이런식으러 해주면 해당 인덱스값이 존재하지 않았다면 추가 존재했다면 수정이 되는것이다

한가지 주의할 점은 인덱스의 순서를 뛰어넘으면서 추가하게 되면 undefined 값이 자동으로 들어간 요소가 생성된다는 것이다 예를 들어 인덱스 5 까지 밖에 없던 배열에 인덱스 7 값을 추가해주면 
인덱스 6 자리에 저절로 undefined 값인 요소가 추가된다는 것이다 물론 이 때 length 는 8이 된다 

요소를 삭제하는 방법은 일단 delete 연산자를 써보자 

let an_array = [
"zero",
"one",
"two",
"three"
]

delete an_arrayp[3]
console.log(an_array) -> 여전히 인덱스 3부분이 출력된다 empty(undefined) 로 출력된다 
consoole.log(an_array.length) -> 여전히 4이다 
이 경우 완벽하게 삭제된것이 아니다

배열의 요소를 완벽하게 삭제하려면 배열의 메소드를 활용해야한다 이 부분은 다음 시간에
----------------------------------------------------------------------------------------------------------------------------------------------

splice 메소드

let an_array = [
"zero",
"one",
"two",
"three"
]

an_array.splice(3)
console.log(an_array) -> "three" 없어짐 lenth도 4에서 1이됨

다른 인덱스 해보자 

let an_array = [
"zero",
"one",
"two",
"three"
]

console.log(an_array[1]) -> One
an_array.splice(1) -> 인덱스 1과 그 이후의 모든 값들을 삭제
console.log(an_array) -> ['Zero']

splice 메소드에 두번째 패러미터를 넣어주면 삭제할 요소의 개수를 정할 수 있다

let an_array = [
  "zero",
  "one",
  "two",
  "three"
  ]

an_array.splice(1,2) -> 첫번째 패러미터는 삭제를 시작할 인덱스 두번째 패러미터는 삭제할 개수이다
console.log(an_array) -> (2) ['zero', 'three']

1번 인덱스부터 2번 인덱스 까지 삭제된다
an_array.splice(1,1) 이렇게하면 인덱스 1만 지워진다

let an_array = [
  "zero",
  "one",
  "two",
  "three"
  ]

an_array.splice(0,2)
console.log(an_array) -> (2) ['two', 'three']

splice 메소드의 세번째 이후 패러미터를 이용하면 값을 추가할 수도 있다 

let an_array = [
  "zero",
  "one",
  "two",
  "three"
  ]

an_array.splice(1,2, "four", "five", "six")
console.log(an_array) -> (5) ['zero', 'four', 'five', 'six', 'three']

1번 인덱스부터 두개를 삭제하고 1번 자리부터 순서대로 "four" "five" 그리고 "six"를 추가했다 뒤에 있던 "three"는 "six" 다음 인덱스로 밀리게 된다
여기서 만약 세번째 네번째 패러미터만 이용해서 값을 추가했다면 ("four"과 "five" 만 넣었다면) 수정하기인것이다

지금까지 배운걸 종합하면 splice 메소드로 요소를 삭제하지 않고도 요소를 추가할 수 있다 

let an_array = [
  "zero",
  "one",
  "two",
  "three"
  ]

an_array.splice(1,0, "four", "five", "six")
console.log(an_array) -> (7) ['zero', 'four', 'five', 'six', 'one', 'two', 'three']

짜잔 추가할 개수를 0으로 해줬더니 1번 인덱스 자리에 추가할 요소들이 비집고 들어가게 되고 원래 인덱스 1에 있던 "One" 부터 뒤로 밀리게 된다
이렇게 하면 추가하기를 할 수 있다 
-----------------------------------------------------------------------------------------------------------------------------------------

splice 메소드의 응용

let an_array = [
  "zero",
  "one",
  "two",
  "three"
]

// 배열의 첫 요소를 삭제
an_array.splice(0,1)
//배열의 마지막 요소를 삭제
an_array.splice(an_array.lenth - 1, 1)
//배열의 첫 요소로 값 추가
an_array.splice(0, 0, "Hello")
//배열의 마지막 요소로 값 추가
an_array.splice(an_array.length, 0, "Bye")

그런데 다른 메소드를 활용하면 위의 예들을 더 간단하게 작성할 수 있다

shift 메소드
배열의 가장 첫 요소를 삭제하는 메소드이다 패러미터가 없고 그냥 array.shift() 호출하면 첫 요소를 삭제하고 나머지 요소들을 앞으로 땡겨준다

pop 메소드
배열의 가장 마지막 요소를 삭제하는 메소드이다 패러미터가 없고 그냥 array.pop() 호출하면 마지막 요소를 삭제하게 된다

unshift 메소드
배열의 첫 요소로 값을 추가하는 메소드이다 패러미터로 추가할 값을 받는다 첫 요소 자리에 값을 추가해주고 나머지는 뒤로 밀리게 된다
ex) array.unshift("Hello")

push 메소드
배열의 마지막 요소로 값을 추가하는 메소드이다 패러미터로 추가할 값을 받는다
ex) array.push("Bye")

이렇게 배열의 양 끝을 다뤄야할 때는 splice 보다 위의 메소드들이 유용할 수 있다

let an_array = [
  "zero",
  "one",
  "two",
  "three"
  ]

  an_array.unshift("Hi", "Hello")
  console.log(an_array) -> (6) ['Hi', 'Hello', 'zero', 'one', 'two', 'three']
  an_array.push("Bye", "Good Bye")
  console.log(an_array)  -> (8) ['Hi', 'Hello', 'zero', 'one', 'two', 'three', 'Bye', 'Good Bye']
  an_array.shift()
  console.log(an_array)  -> (7) ['Hello', 'zero', 'one', 'two', 'three', 'Bye', 'Good Bye']
  an_array.pop()
  console.log(an_array)  -> (6) ['Hello', 'zero', 'one', 'two', 'three', 'Bye']

-----------------------------------------------------------------------------------------------------------------------------

splice, shift, pop, unshift, push 말고도 배열에는 다양한 메서드들이 있습니다.
배열에서 특정 값 찾기 (indexOf / lastIndexOf)

배열에서 특정 값을 찾으려면 indexOf 메소드를 사용하면 됩니다. array.indexOf(item)을 하면 array 배열에 item이 포함되어 있는지 확인할 수 있습니다.

    만약 포함되어 있다면, item이 있는 인덱스가 리턴됩니다.
    포함되어 있지 않다면, -1이 리턴됩니다.
    여러 번 포함되어 있으면, 처음 발견된 인덱스가 리턴됩니다.

let brands = ['Google', 'Kakao', 'Naver', 'Kakao'];
console.log(brands.indexOf('Kakao'));
console.log(brands.indexOf('Daum'));

1
-1

그리고 비슷하게 lastIndexOf라는 메소드가 있는데요. indexOf와는 반대로 탐색을 뒤에서 부터 하게 됩니다. 그러니깐 방금과 같은 경우에 'Kakao'를 lastIndexOf 메소드로 찾게 되면 마지막에 있는 인덱스가 리턴되겠죠?

let brands = ['Google', 'Kakao', 'Naver', 'Kakao'];
console.log(brands.lastIndexOf('Kakao'));
console.log(brands.lastIndexOf('Daum'));

3
-1

배열에서 특정 값이 있는지 확인하기 (includes)

indexOf/lastIndexOf는 특정 값을 찾아서 해당 값의 index를 알려줍니다.
하지만, 때로는 그냥 그 값이 배열안에 있는지, 그 여부만 확인하고 싶을 수도 있는데요. 그럴때는 includes 라는 메소드를 활용하면 됩니다.

array.includes(item)을 하게되면 array배열에 item이 있을 경우 true를, 없을 경우 false를 리턴합니다.

let brands = ['Google', 'Kakao', 'Naver', 'Kakao'];
console.log(brands.includes('Kakao'));
console.log(brands.includes('Daum'));

true
false

배열 뒤집기 (reverse)

reverse라는 메소드를 활용하면, 배열의 순서를 뒤집을 수도 있습니다.

let brands = ['Google', 'Kakao', 'Naver', 'Kakao'];
console.log(brands);
brands.reverse();
console.log(brands);

(4) ["Google", "Kakao", "Naver", "Kakao"]
(4) ["Kakao", "Naver", "Kakao", "Google"]

그리고...

사실 이 밖에도 배열이 가지고 있는 유용한 메소드들이 다양하게 있는데요.

더 많은 내용을 알고싶다면, 이 링크를 참고해보세요!

https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array
-------------------------------------------------------------------------------------------------------------------------------------








