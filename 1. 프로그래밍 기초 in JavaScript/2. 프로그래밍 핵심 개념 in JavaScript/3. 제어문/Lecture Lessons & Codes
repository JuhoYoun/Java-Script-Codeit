if else

ex)
let temp = 1;

if (temp <= 0) {
  console.log("물이 업니다")
} else {
  console.log("물이 안얼어요")
}


else if 

ex)
let temp = 1;

if (temp <= 0) {
  console.log("물이 업니다")
} else if (temp < 100 ) {
  console.log("물이 얼지도 끓지도 안아요")
} else {
  console.log("물이 끓어요")
}

----------------------------------------------------------------------------------------------------------------------------------------

switch

ex)

switch (비교할 값) {
  case 조건값1:
    동작부분;
    break; -> switch 문을 빠져 나오라는 뜻 
  case 조건값2:
    동작부분;
    break;
  case 조건값3:
    동작부분;
    break;
  default: -> 비교할 값이 모든 조건값과 일치하지 않을 때 default 문은 필요여부에 따라 생략 가능하다
    동작부분;
}

근데 switch 문에서 break을 다 지우면 어떻게 될까? 다 지워 보자 여기서 꿀팁 맥사용자는 break 있는 줄을 드래그해서 command + d (윈도우는 ctrl + d) 하면 똑같은 모양으로 된 코드를 모두 선택할 수 있다
switch 문은 조건과 일치하는 경우를 모두 선택해서 지워버리자 자 이제 비교할 값에 case 2 값을 넣으면 어떻게 될까? 그러면 case 2 동작부분 부터 case 3 동작부분 그리고 default의 동작부분 까지 모든
동작 부분이 실행된다 switch 문은 이렇게 조건과 일치하는 경우를 찾은 다음 break 문을 만나기 전까지 그 아래의 모든 동작을 실행한다
--------------------------------------------------------------------------------------------------------------------------------------------------
지난 시간에 switch문에 대해서 살펴봤는데요.

if문을 활용하면 switch문을 if문으로 대체할 수도 있습니다.

let myChoice = 2;

switch(myChoice) {
  case 1:
    console.log('토끼를 선택한 당신, ...');
    break;
  case 2:
    console.log('고양이를 선택한 당신, ...');
    break;
  case 3:
    console.log('코알라를 선택한 당신, ...');
    break;
  case 4:
    console.log('강아지를 선택한 당신, ...');
    break;
  default:
    console.log('1에서 4사이의 숫자를 선택해 주세요.'); 
}

if (myChoice === 1) {
  console.log('토끼를 선택한 당신, ...');
} else if (myChoice === 2) {
  console.log('고양이를 선택한 당신, ...');
} else if (myChoice === 3) {
  console.log('코알라를 선택한 당신, ...');
} else if (myChoice === 4) {
  console.log('강아지를 선택한 당신, ...');
} else {
  console.log('1에서 4사이의 숫자를 선택해 주세요.');
}

이제 이런 코드들은 어느 정도 이해할 수 있으시죠?
동작은 switch문으로 만든 원리와 똑같이 동작합니다. 이 상태로 코드를 실행해보면, 동일한 결과가 두 번 나타나는 걸 확인할 수 있는데요.

그런데 보시면 if문 쪽을 보시면 myChoice를 조건 값과 함께 비교하는 조건식을 매번 작성해야 하는 번거로움도 있고, 코드 길이만 봤을 땐 좀 더 간결한 것 같지만, 뭔가 switch문이 조금 더 눈에 잘 읽히는 것 같죠?

if문과 switch문 모두 특정한 조건에 따라 다르게 동작하는 코드를 만들 수 있지만, 어떤 넓은 범위를 만족하는 조건식을 만들 때는 if문을 활용하는 것이 좀 더 효과적이고 특정한 값에 일치하는 조건을 만들 때는 switch문이 좀 더 효과적입니다.

그런데 switch문이 익숙하지 않으신 분은 이렇게 if else문으로도 대체가 가능하니깐 switch문의 구조가 너무 어려우신 분은 if else문을 활용하셔도 좋습니다.

한 가지 주의할 점은 조건식에서 등호를 반드시 3개를 입력해 주어야 한다는 점인데요. switch문은 암시적 형 변환을 허용하지 않기 때문입니다.

let myChoice = '2';

switch(myChoice) {
  case 1:
    console.log('토끼를 선택한 당신, ...');
    break;
  case 2:
    console.log('고양이를 선택한 당신, ...');
    break;
  case 3:
    console.log('코알라를 선택한 당신, ...');
    break;
  case 4:
    console.log('강아지를 선택한 당신, ...');
    break;
  default:
    console.log('1에서 4사이의 숫자를 선택해 주세요.'); 
}

if (myChoice === 1) {
  console.log('토끼를 선택한 당신, ...');
} else if (myChoice === 2) {
  console.log('고양이를 선택한 당신, ...');
} else if (myChoice === 3) {
  console.log('코알라를 선택한 당신, ...');
} else if (myChoice === 4) {
  console.log('강아지를 선택한 당신, ...');
} else {
  console.log('1에서 4사이의 숫자를 선택해 주세요.');
}

위 코드 처럼

변수 myChoice에 숫자 2가 아니라 문자열 '2'를 할당하고 실행해보면 default문과, else문이 실행되는 모습을 확인할 수 있는데요.

1에서 4사이의 숫자를 선택해 주세요.
1에서 4사이의 숫자를 선택해 주세요.

이 상태에서 else if문을 등호 두 개로 비교하면 어떻게 될까요?

let myChoice = '2';

switch(myChoice) {
  case 1:
    console.log('토끼를 선택한 당신, ...');
    break;
  case 2:
    console.log('고양이를 선택한 당신, ...');
    break;
  case 3:
    console.log('코알라를 선택한 당신, ...');
    break;
  case 4:
    console.log('강아지를 선택한 당신, ...');
    break;
  default:
    console.log('1에서 4사이의 숫자를 선택해 주세요.'); 
}

if (myChoice == 1) {
  console.log('토끼를 선택한 당신, ...');
} else if (myChoice == 2) {
  console.log('고양이를 선택한 당신, ...');
} else if (myChoice == 3) {
  console.log('코알라를 선택한 당신, ...');
} else if (myChoice == 4) {
  console.log('강아지를 선택한 당신, ...');
} else {
  console.log('1에서 4사이의 숫자를 선택해 주세요.');
}

if문의 경우에는 문자열 2가 들어가서 동등 비교가 이뤄지면, true라는 결과가 나오기 때문에, 위 코드를 실행해보면, switch문은 default문이 실행되고, if문에서는 첫번째 else if문이 실행되는걸 확인할 수 있습니다.

1에서 4사이의 숫자를 선택해 주세요.
고양이를 선택한 당신, ...

그렇기 때문에, switch문은 값들을 비교할 때 자료형을 엄격하게 구분한다는 것과 if문으로 대체할 때는 반드시 등호 3개로 일치비교를 해야한다는 것.
이 부분은 꼭 기억해 두시면 좋을 것 같습니다! :)

---------------------------------------------------------------------------------------------------------------------------------------------

for

for (초기화 부분; 조건 부분; 추가 동작 부분) {
  동작 부분;
}

초기화 부분 : for 문이 시작할 때 가장 먼저 그리고 딱 한번 실행됨
조건 부분 : 이 부분에 작성된 코드를 불린 형태로 평가한 후 true면 동작 부분을 실행한다
추가 동작 부분 : 조건 부분이 true로 판단됬을 때 동작 부분을 수행한 후 추가로 수행할 동작를 작성하는 곳

ex)
for ( let i = 0; i < 10; i++){
  console.log(i);
}
-------------------------------------------------------------------------------------------------------------------------------------------------

for (let i = 1; i <= 10; i++) {
  console.log(`${i} 코드잇 최고!`);
}

여기 지난 시간에 배운 for 반복문 코드가 있습니다.

이 코드를 보면서 for 반복문에 대해서 조금만 더 살펴봅시다.
1. 추가동작부분을 꼭 채울 필요는 없다.

for 반복문에서 추가동작부분은 사실 꼭 채울 필요는 없습니다.

추가동작부분에서 i를 1씩 증가시키는 부분이 여기 동작부분에 들어가도 문제는 없습니다.

for (let i = 1; i <= 10;) {
  console.log(`${i} 코드잇 최고!`);
  i++;
}

위 코드 처럼 동작부분 아래에 i를 증가시켜도 아무런 문제 없이 똑같은 결과가 출력이 되는데요.
동작부분에서 i를 증가시켰고, 추가동작부분에는 아무것도 작성하지 않았기 때문에 그냥 추가 동작부분에서 아무 동작도 하지 않는 것입니다.

하지만, for문의 특성상, 이 추가동작부분이 있기 때문에 여기 동작부분에서는 실제로 반복하고자하는 내용들만 집중하고 어떤 조건과 관련된 부분은 이 소괄호에 집중하면서 좀 더 목적에 맞는 코드를 작성할 수 있게 되는 것이죠.
2. 초기화부분에서 생성한 변수는 for문의 로컬변수다.

for 반복문의 초기화 부분에서 생성한 변수는 for문 안에서의 로컬변수가 됩니다.

for (let i = 1; i <= 10; i++) {
  console.log(`${i} 코드잇 최고!`);
}

console.log(i); // Error !!

for문 안에서 생성한 로컬변수이기 때문에 for 반복문이 종료되고 나서 for 반복문 밖에서 변수를 사용하려고 하면 오류가 발생한다는 점.

사소하지만 이런 부분들도 꼭 기억해 주세요!
3. 초기화 부분도 반드시 채울 필요는 없다. 단,

for 반복문에서 초기화부분도 사실 꼭 채울 필요는 없습니다.

let i = 1; 
for (; i <= 10; i++) {
  console.log(`${i} 코드잇 최고!`);
}

위 코드 처럼 for 반복문의 로컬변수를 꼭 활용하지 않아도 반복문 밖에 있는 글로벌 변수를 활용해도 아무런 문제없이 같은 결과를 출력합니다.

단! for문의 소괄호 안쪽 가장 첫번째 세미콜론은 생략할 수 없습니다.

저 세미콜론은 초기화부분과, 조건부분을 구분하는 세미콜론이기 때문에 초기화 부분의 코드를 생략하더라도 세미콜론 만큼은 생략해선 안되는 것이죠!

for문의 소괄호 안쪽은 반드시 세미콜론 2개가 필요합니다. 그렇지 않으면 실행 오류를 만나게 된다는 점. 꼭 기억해 주세요 :)

---------------------------------------------------------------------------------------------------------------------------

while 문

while ( 조건부분 ) {
  동작부분;
}

ex)
i = 0

while ( i < 10 ) {
  console.log(i);
  i++
}

지금 보면 while을 쓸때는 for 쓸때와 다르게 i를 global 변수로 선언해야했고 추가 동작 부분에 들어갈 수 있는 부분도 동작 부분에 써줘야했다 그러면 for 문과 비교해서 언제 while문을 쓰면 좋을까?
보통 쓰고 사라지는 local 변수를 선언하지 않고 이미 있던 global 변수를 사용하고 루프가 끝난 이후에도 그 변수를 사용하고 싶을 때 while 문이 for 문 보다 좋다

-----------------------------------------------------------------------------------------------------------------------------------------------

break 와 continue

break는 switch 문 뿐만 아니라 반복문에서도 사용가능한데 break 이 나오는 순간 조건문과 상관 없이 반복문에서 빠져나간다

이와는 다르게 continue는 동작 부분을 한번 건너 뛰는 것이다 continue를 만나면 그 아래 코드는 실행하지 않고 바로 다음 단계로 가는 것이다 for 문에서는 동작 부분 중에 continue를 만나면
아래 동작을 실행하지 않고 바로 추가 동작 부분으로 가고 while문의 경우엔 동작 부분중에 continue를 만나면 아래 동작 부분을 스킵하고 바로 조건 부분으로 간다

-------------------------------------------------------------------------------------------------------------------------------------------------------






