if else

ex)
let temp = 1;

if (temp <= 0) {
  console.log("물이 업니다")
} else {
  console.log("물이 안얼어요")
}


else if 

ex)
let temp = 1;

if (temp <= 0) {
  console.log("물이 업니다")
} else if (temp < 100 ) {
  console.log("물이 얼지도 끓지도 안아요")
} else {
  console.log("물이 끓어요")
}

----------------------------------------------------------------------------------------------------------------------------------------

switch

ex)

switch (비교할 값) {
  case 조건값1:
    동작부분;
    break; -> switch 문을 빠져 나오라는 뜻 
  case 조건값2:
    동작부분;
    break;
  case 조건값3:
    동작부분;
    break;
  default: -> 비교할 값이 모든 조건값과 일치하지 않을 때 default 문은 필요여부에 따라 생략 가능하다
    동작부분;
}

근데 switch 문에서 break을 다 지우면 어떻게 될까? 다 지워 보자 여기서 꿀팁 맥사용자는 break 있는 줄을 드래그해서 command + d (윈도우는 ctrl + d) 하면 똑같은 모양으로 된 코드를 모두 선택할 수 있다
switch 문은 조건과 일치하는 경우를 모두 선택해서 지워버리자 자 이제 비교할 값에 case 2 값을 넣으면 어떻게 될까? 그러면 case 2 동작부분 부터 case 3 동작부분 그리고 default의 동작부분 까지 모든
동작 부분이 실행된다 switch 문은 이렇게 조건과 일치하는 경우를 찾은 다음 break 문을 만나기 전까지 그 아래의 모든 동작을 실행한다
--------------------------------------------------------------------------------------------------------------------------------------------------
지난 시간에 switch문에 대해서 살펴봤는데요.

if문을 활용하면 switch문을 if문으로 대체할 수도 있습니다.

let myChoice = 2;

switch(myChoice) {
  case 1:
    console.log('토끼를 선택한 당신, ...');
    break;
  case 2:
    console.log('고양이를 선택한 당신, ...');
    break;
  case 3:
    console.log('코알라를 선택한 당신, ...');
    break;
  case 4:
    console.log('강아지를 선택한 당신, ...');
    break;
  default:
    console.log('1에서 4사이의 숫자를 선택해 주세요.'); 
}

if (myChoice === 1) {
  console.log('토끼를 선택한 당신, ...');
} else if (myChoice === 2) {
  console.log('고양이를 선택한 당신, ...');
} else if (myChoice === 3) {
  console.log('코알라를 선택한 당신, ...');
} else if (myChoice === 4) {
  console.log('강아지를 선택한 당신, ...');
} else {
  console.log('1에서 4사이의 숫자를 선택해 주세요.');
}

이제 이런 코드들은 어느 정도 이해할 수 있으시죠?
동작은 switch문으로 만든 원리와 똑같이 동작합니다. 이 상태로 코드를 실행해보면, 동일한 결과가 두 번 나타나는 걸 확인할 수 있는데요.

그런데 보시면 if문 쪽을 보시면 myChoice를 조건 값과 함께 비교하는 조건식을 매번 작성해야 하는 번거로움도 있고, 코드 길이만 봤을 땐 좀 더 간결한 것 같지만, 뭔가 switch문이 조금 더 눈에 잘 읽히는 것 같죠?

if문과 switch문 모두 특정한 조건에 따라 다르게 동작하는 코드를 만들 수 있지만, 어떤 넓은 범위를 만족하는 조건식을 만들 때는 if문을 활용하는 것이 좀 더 효과적이고 특정한 값에 일치하는 조건을 만들 때는 switch문이 좀 더 효과적입니다.

그런데 switch문이 익숙하지 않으신 분은 이렇게 if else문으로도 대체가 가능하니깐 switch문의 구조가 너무 어려우신 분은 if else문을 활용하셔도 좋습니다.

한 가지 주의할 점은 조건식에서 등호를 반드시 3개를 입력해 주어야 한다는 점인데요. switch문은 암시적 형 변환을 허용하지 않기 때문입니다.

let myChoice = '2';

switch(myChoice) {
  case 1:
    console.log('토끼를 선택한 당신, ...');
    break;
  case 2:
    console.log('고양이를 선택한 당신, ...');
    break;
  case 3:
    console.log('코알라를 선택한 당신, ...');
    break;
  case 4:
    console.log('강아지를 선택한 당신, ...');
    break;
  default:
    console.log('1에서 4사이의 숫자를 선택해 주세요.'); 
}

if (myChoice === 1) {
  console.log('토끼를 선택한 당신, ...');
} else if (myChoice === 2) {
  console.log('고양이를 선택한 당신, ...');
} else if (myChoice === 3) {
  console.log('코알라를 선택한 당신, ...');
} else if (myChoice === 4) {
  console.log('강아지를 선택한 당신, ...');
} else {
  console.log('1에서 4사이의 숫자를 선택해 주세요.');
}

위 코드 처럼

변수 myChoice에 숫자 2가 아니라 문자열 '2'를 할당하고 실행해보면 default문과, else문이 실행되는 모습을 확인할 수 있는데요.

1에서 4사이의 숫자를 선택해 주세요.
1에서 4사이의 숫자를 선택해 주세요.

이 상태에서 else if문을 등호 두 개로 비교하면 어떻게 될까요?

let myChoice = '2';

switch(myChoice) {
  case 1:
    console.log('토끼를 선택한 당신, ...');
    break;
  case 2:
    console.log('고양이를 선택한 당신, ...');
    break;
  case 3:
    console.log('코알라를 선택한 당신, ...');
    break;
  case 4:
    console.log('강아지를 선택한 당신, ...');
    break;
  default:
    console.log('1에서 4사이의 숫자를 선택해 주세요.'); 
}

if (myChoice == 1) {
  console.log('토끼를 선택한 당신, ...');
} else if (myChoice == 2) {
  console.log('고양이를 선택한 당신, ...');
} else if (myChoice == 3) {
  console.log('코알라를 선택한 당신, ...');
} else if (myChoice == 4) {
  console.log('강아지를 선택한 당신, ...');
} else {
  console.log('1에서 4사이의 숫자를 선택해 주세요.');
}

if문의 경우에는 문자열 2가 들어가서 동등 비교가 이뤄지면, true라는 결과가 나오기 때문에, 위 코드를 실행해보면, switch문은 default문이 실행되고, if문에서는 첫번째 else if문이 실행되는걸 확인할 수 있습니다.

1에서 4사이의 숫자를 선택해 주세요.
고양이를 선택한 당신, ...

그렇기 때문에, switch문은 값들을 비교할 때 자료형을 엄격하게 구분한다는 것과 if문으로 대체할 때는 반드시 등호 3개로 일치비교를 해야한다는 것.
이 부분은 꼭 기억해 두시면 좋을 것 같습니다! :)

---------------------------------------------------------------------------------------------------------------------------------------------

for

for (초기화 부분; 조건 부분; 추가 동작 부분) {
  동작 부분;
}

초기화 부분 : for 문이 시작할 때 가장 먼저 그리고 딱 한번 실행됨
조건 부분 : 이 부분에 작성된 코드를 불린 형태로 평가한 후 true면 동작 부분을 실행한다
추가 동작 부분 : 조건 부분이 true로 판단됬을 때 동작 부분을 수행한 후 추가로 수행할 동작를 작성하는 곳

ex)
for ( let i = 0; i < 10; i++){
  console.log(i);
}
-------------------------------------------------------------------------------------------------------------------------------------------------



