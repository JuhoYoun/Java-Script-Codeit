숫자형
-사칙연산, 나머지연산(modulus) % , 거듭제곱 
-계산 순서는 수학이랑 같다


문자열
- 문자열은 "" 나 '' 이렇게 감싼다
- 만약 '가 문자열 내에 포함되어있으면 문자열을 "" 이렇게 감싸면 된다 (반대상황도 동일)
- 문자열 내에 " 나 ' 가 모두 포함되어야할 때는 \ (역슬래쉬)를 쓸 수 있다 -> \' 또는 \" 이렇게 \ 뒤의 "나 '는 문자열이라고 인식한다
- 백틱 ` (숫자 1 옆에 있는 키보드 버튼)도 사용할 수 있다 -> `"I'm fine"` ->  이러면 \ 안쓰고도 "랑 ' 둘 다 문자열로 쓸 수 있다 -> 백틱은 맥에서 한글일때는 ₩ 영어일 때는 ` 이렇게 된다

부울 대수
- 진리값 true, false 
- 연산자 And Or Not
- 명제: 참 또는 거짓이 확실한 문장

불린형 

숫자 비교
ex) 2 > 1, 2 < 1, 2 <= 1, 3 >=4, 1 === 1, 1 !== 1

문자열 비교
ex) "codeit" === "codeit"

불린 연산
- AND 는 앰퍼샌드 기호 두개 -> &&
- OR 은 세로 바 두개 -> ||
- NOT 은 ! 기호

----------------------------------------------------------------------------------------------------------------------------------------------

불린형 연습

지난 시간에 불린형에 대해서 알아봤는데요. 이번 시간에는 지난 시간에 배운 것들을 활용해서 다양한 방식으로 불린형을 좀 더 연습해 봅시다.

// 불린 (Boolean)
console.log(2 < 1 && 'Codeit' !== 'Codeit');

2 < 1는 false고, 'Codeit' !== 'Codeit'도 false이기 때문에 이 코드는 false && false가 되어서 실행했을 때 false가 출력됩니다. 
그런데 사실, AND연산을 할 때 왼쪽이 false일 경우 오른쪽은 볼 필요도 없이 결과가 false입니다. AND연산은 양쪽이 모두 true인 경우에만 true가 리턴되기 때문이죠!
그래서 불린 연산자가 하나만 있을 때는 연산자를 기준으로 왼쪽부터 순서대로 확인하면 됩니다.

그럼 이 코드는 어떨까요?

// 불린 (Boolean)
console.log(7 !== 7 || 4 < 3);

이번에는 OR 연산인데요. OR연산의 경우에는 AND연산과 반대로 왼쪽이 true라면, 오른쪽은 볼 필요도 없이 결과는 true가 됩니다.
그런데 마침 OR연산의 왼쪽, 그러니까 7 !== 7이 false이기 때문에 이제 오른편도 확인해야 하네요.
4 < 3은 false이기 때문에 결과적으로 위 연산은 false OR false가 돼서 코드를 실행해보면 false가 출력됩니다.

마지막으로 하나만 더 해볼까요?

// 불린 (Boolean)
let x = 3;
console.log(x > 4 || !(x > 2));

이번에는 변수까지 활용해서 첫 번째 x라는 변수에 3이라는 값을 저장했습니다.
이번에는 조금 복잡해 보이니깐 여기 아래 코드를 하나 더 복사해서 부분부분 같이 수정하면서 확인해 봅시다.

// 불린 (Boolean)
let x = 3;
console.log(x > 4 || !(x > 2));
console.log(x > 4 || !(x > 2));

이번에도 순서대로 왼쪽의 비교연산부터 정리해 봅시다.

x > 4는 3 > 4가 되죠?

// 불린 (Boolean)
let x = 3;
console.log(x > 4 || !(x > 2));
console.log(3 > 4 || !(x > 2));

3 > 4는 false이기 때문에 오른쪽도 살펴봐야합니다.

// 불린 (Boolean)
let x = 3;
console.log(x > 4 || !(x > 2));
console.log(false || !(x > 2));

다음은 NOT연산이 있는데요. 그런데 어떤 값을 NOT연산 해야되는지 아직은 모르니깐, 괄호 안의 비교 연산을 정리해 봅시다.

x > 2는 3 > 2가 되죠?

let x = 3;
console.log(x > 4 || !(x > 2));
console.log(false || !(3 > 2));

3 > 2는 true입니다.

let x = 3;
console.log(x > 4 || !(x > 2));
console.log(false || !true);

그럼 이제 NOT연산도 정리해 줍시다.

let x = 3;
console.log(x > 4 || !(x > 2));
console.log(false || false);

결과적으로 위 연산은 false || false가 돼서

코드를 실행하면 false가 두 번 출력되는걸 확인할 수 있습니다.

let x = 3;
console.log(x > 4 || !(x > 2));
console.log(false);
false
false

-----------------------------------------------------------------------------------------------------------------------------

typeof 연산자

typeof 라는 키워드 옆에 값을 입력하면 해당 자료형을 문자열로 되돌려준다
ex) 
console.log(typeof "true") -> string
console.log(typeof 1) -> number JS는 정수와 소수를 따로 구분하지 않고 다 number 형이다
console.log(typeof 1.1) -> number

typeof 연산자는 변수와 함수에서도 활용가능
ex)
console.log(typeof name) -> string (name에 문자열이 할당되있다는 가정)
console.log(typeof sayHello) -> function (sayHello 라는 function이 있다 하자)

마지막으로 이번에는 typeof 연산자에 연산식을 넣어보도록 하자
->
console.log(typeof "code" + "it") -> stringit -> typeof 가 앞의 "code" 만 받아 "string" 을 반환하고 이게 "it" 이랑 합쳐진다
console.log(typeof 1 + 2) -> NAN 이라고 뜬다 NAN 은 not a number 라는 뜻 역시 typeof 가 앞에 1만 맏어 이걸 "number" 로 반환하고 문자열을 숫자형이랑 더하려니 이런 에러가 나온다

typeof 연산자는 사칙연산보다 우선순위가 높다 위의 경우에는 괄호를 사용하자
----------------------------------------------------------------------------------------------------------------------------------------




