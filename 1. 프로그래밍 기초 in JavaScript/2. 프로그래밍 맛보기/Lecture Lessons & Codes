많은 프로그래밍 언어가 문장을 구분하는 방법으로 세미콜론(;)을 사용한다 경우에 따라 이 세미콜론으로 문장을 구분하지 않으면 오류가 생기기도 하는데 사실 이전 과제에서 우리는 js 코드가 세미콜론 없이도
잘 동작하는 모습을 보았다 JavaScript에는 한줄에 한문장 씩 작성할 경우 코드를 실행할 때 자동으로 세미콜론을 추가해주는 기능이 있기 때문에 이런 경우에는 문제 없이 코드가 잘 작동된다
그런 데 두 문장을 두줄이 아니라 한줄에 작성한다면? -> Syntax Error 그리고 에디터에 표시된 빨간줄에 커서를 대면 세미콜론이 필요하다고 한다 세미콜론을 붙여서 하면?
-> console.log('Hello'); console.log("World")  
두 단어가 차례대로 잘 출력된다 

개발자들 사이에서는 이 세미콜론을 가능하면 생략하고 꼭 필요한 경우에만 쓰자고 하는 의견이 있고 꼭 사용하자는 의견도 있다 이번 강의에서는 문장의 단위를 판단하고 예상치 못한 오류를 줄이기 위해 쓰면서 하자
-------------------------------------------------------------------------------------------------------------------------------------
코멘트 (//)

같은 줄에서 //  이후의 코드는 자동으로 해석되지 않는다 이렇게 // 는 한 줄 코멘트 방식이다

/**/ 여기 별 사이에 코드를 입력하면 아무리 줄 바꿈을 해줘도 모든 줄이 코멘트 처리 된다

코멘트를 사용할 때 
1. 어떤 의도로 코드가 작성되었는지 설명할 때
2. 구현한 코드가 어떤 동작을 하는지 기록할 때
--------------------------------------------------------------------------------------------------------------------------------------

자료형 개요

자료형 ( Data Type)

1. 숫자형 (Number)
- 정수형 (Integer)
- 소수형 (Floating Point)

숫자형은 기본적으로 사칙연산이 가능

2. 문자열 (String)
ex) "Hello" 'World'

+ 를 통해 문자열 연결이 가능하다

3. 불린 (Boolean)
ex) true, false

이 외에 몇가지 자료형이 더 있다
-----------------------------------------------------------------------------------------------------------------------
추상화 개요

어떤 표현을 할 때 친절하게 설명하기 위해 하나부터 열까지 구체적으로 다 표현하면 좋지만 너무 세세한 표현들은 집중력을 떨어뜨리기도 하고 상대방이 알고 있는 내용이라면 시간낭비이기도 하다 
이럴 때 원활한 소통 (communication)을 위한 표현 방식들 중 하나로 추상화(abstraction) 라는것이 있다 구체적인 정보들은 숨기고 꼭 필요한 핵심만 뽑아서 표현하는 방식을 추상화라고 한다
예로는 많은 글들을 함축적이게 표현한 제목이나 영화의 줄거리가 있는데 결국엔 디테일한 내용이나 장면들은 숨기고 목적에 맞게 필요한 핵심만 표현하는걸 추상화라고 한다 이런 의미에서 복잡한것을
목적에 맞게 단순하게 하는것을 추상화라고 할 수 있는데 어딘가 장소를 찾을 때 쓰는 지도도 추상화라고 할 수 있다 다양한 목적에 맞게 추상화된 지도들은 그냥 보는것만으로 쉽게 이해하고 원하는 정보를 
얻을 수 있는데 추상화는 단순하고 간결하게 표현하면서도 핵심만은 명확하게 드러내는 것으로 표현을 하는 입장에서도 이를접하는 입장에서도 효과적인 communication 수단이다

프로그래밍에서도 이 추상화의 개념을 이해하는것이 중요하다 프로그래밍을 통해 어떤 프로그램을 만든다는 것은 코드를 만드는 자신과의 소통, 작성한 코드를 실행하는 컴퓨터와의 소통, 함께 코드를 작성하는
동료와의 소통 그리고 프로그램을 이용하는 사용자와의 소통 모두를 포함한다
--------------------------------------------------------------------------------------------------------------------------

변수

변수 선언
ex)
let espressoPrice;

이렇게 선언한 변수에 값을 넣어줄 수 있다
->
espressoPrice = 3000; # =는 할당 연산자로 3000을 변수에 할당해준다

또 변수 선언과 동시에 값을 할당해 줄 수 있따
->
 let espressoPrice = 3000;

변수와 추상화
구체적인 숫자를 숨기고 그 숫자들의 의미를 부여할 수 있다
console.log(3000 * 3) -> console.log(espressoPrice * 3)
-----------------------------------------------------------------------------------------------------------------------------







